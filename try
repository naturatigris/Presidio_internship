

CREATE TRIGGER rental_update_trigger
AFTER INSERT ON rental
FOR EACH ROW
EXECUTE FUNCTION log_rental_update();

CREATE OR REPLACE FUNCTION log_rental_update()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO rental_log (rental_time, customer_id, film_id, amount)
    VALUES (NEW.rental_date, NEW.customer_id, NEW.film_id, NEW.amount);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION log_rental_update()
RETURNS TRIGGER AS $$
BEGIN
    RAISE NOTICE 'Inserting rental log: %', NEW.customer_id;

    INSERT INTO rental_log (rental_time, customer_id, film_id, amount)
    VALUES (NEW.rental_date, NEW.customer_id, NEW.film_id, NEW.amount);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE or replace rental (
    rental_id SERIAL PRIMARY KEY,
    customer_id INT NOT NULL,
    film_id INT NOT NULL,
    rental_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount NUMERIC NOT NULL
);

