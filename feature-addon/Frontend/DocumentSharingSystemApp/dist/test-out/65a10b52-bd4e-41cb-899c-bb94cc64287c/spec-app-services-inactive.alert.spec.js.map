{
  "version": 3,
  "sources": ["src/app/services/inactive.alert.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { AlertService } from './inactive.alert';\nimport { InactivityAlert } from './inactive.alert';\nimport { HttpClientTestingModule, HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\nimport { environment } from '../../environments/environment';\nimport { UserModel } from '../models/user.model';\n\ndescribe('AlertService', () => {\n  let service: AlertService;\n  let httpMock: HttpTestingController;\n\n      let user = new UserModel(\"1\");\n    user.accessToken = \"access-token\";\n\n\n  const mockAlert: InactivityAlert = {\n    id: 'alert1',\n    userId: 'user1',\n    user: user,\n    alertedAt: new Date().toISOString(),\n    daysInactive: 5,\n    isDismissed: false,\n    isArchived: false\n  };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [AlertService]\n    });\n\n    service = TestBed.inject(AlertService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should fetch active alerts and update the BehaviorSubject', () => {\n    service.getActiveAlerts(user,'1');\n\n    const req = httpMock.expectOne(`${environment.serverUrl}/InactivityAlert/active/user/1`);\n    expect(req.request.method).toBe('GET');\n    expect(req.request.headers.get('Authorization')).toBe(`Bearer ${user.accessToken}`);\n\n    req.flush([mockAlert]);\n\n    service.alerts$.subscribe(alerts => {\n      expect(alerts.length).toBe(1);\n      expect(alerts[0].id).toBe('alert1');\n    });\n  });\n\n  it('should call dismiss alert API', () => {\n    service.dismissAlert(user, mockAlert.id, 'dismissUser1').subscribe(response => {\n      expect(response).toEqual({ success: true });\n    });\n\n    const req = httpMock.expectOne(\n      `${environment.serverUrl}/InactivityAlert/dismiss/${mockAlert.id}?dismissedBy=dismissUser1`\n    );\n    expect(req.request.method).toBe('POST');\n    expect(req.request.headers.get('Authorization')).toBe(`Bearer ${user.accessToken}`);\n\n    req.flush({ success: true });\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAEA,SAAS,gBAAgB,MAAK;AAC5B,MAAI;AACJ,MAAI;AAEA,MAAI,OAAO,IAAI,UAAU,GAAG;AAC9B,OAAK,cAAc;AAGrB,QAAM,YAA6B;IACjC,IAAI;IACJ,QAAQ;IACR;IACA,YAAW,oBAAI,KAAI,GAAG,YAAW;IACjC,cAAc;IACd,aAAa;IACb,YAAY;;AAGd,aAAW,MAAK;AACd,YAAQ,uBAAuB;MAC7B,SAAS,CAAC,uBAAuB;MACjC,WAAW,CAAC,YAAY;KACzB;AAED,cAAU,QAAQ,OAAO,YAAY;AACrC,eAAW,QAAQ,OAAO,qBAAqB;EACjD,CAAC;AAED,YAAU,MAAK;AACb,aAAS,OAAM;EACjB,CAAC;AAED,KAAG,6DAA6D,MAAK;AACnE,YAAQ,gBAAgB,MAAK,GAAG;AAEhC,UAAM,MAAM,SAAS,UAAU,GAAG,YAAY,SAAS,gCAAgC;AACvF,WAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,KAAK;AACrC,WAAO,IAAI,QAAQ,QAAQ,IAAI,eAAe,CAAC,EAAE,KAAK,UAAU,KAAK,WAAW,EAAE;AAElF,QAAI,MAAM,CAAC,SAAS,CAAC;AAErB,YAAQ,QAAQ,UAAU,YAAS;AACjC,aAAO,OAAO,MAAM,EAAE,KAAK,CAAC;AAC5B,aAAO,OAAO,CAAC,EAAE,EAAE,EAAE,KAAK,QAAQ;IACpC,CAAC;EACH,CAAC;AAED,KAAG,iCAAiC,MAAK;AACvC,YAAQ,aAAa,MAAM,UAAU,IAAI,cAAc,EAAE,UAAU,cAAW;AAC5E,aAAO,QAAQ,EAAE,QAAQ,EAAE,SAAS,KAAI,CAAE;IAC5C,CAAC;AAED,UAAM,MAAM,SAAS,UACnB,GAAG,YAAY,SAAS,4BAA4B,UAAU,EAAE,2BAA2B;AAE7F,WAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,MAAM;AACtC,WAAO,IAAI,QAAQ,QAAQ,IAAI,eAAe,CAAC,EAAE,KAAK,UAAU,KAAK,WAAW,EAAE;AAElF,QAAI,MAAM,EAAE,SAAS,KAAI,CAAE;EAC7B,CAAC;AACH,CAAC;",
  "names": []
}
