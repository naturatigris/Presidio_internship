{
  "version": 3,
  "sources": ["angular:jit:template:src/app/notification/notification.html", "angular:jit:style:src/app/notification/notification.css", "src/app/notification/notification.ts", "src/app/notification/notification.spec.ts"],
  "sourcesContent": ["<app-navbar></app-navbar>\n<div class=\"main\">\n    <div class=\"header\">\n        <h1>Notifications</h1>\n    </div>\n    <div>\n     @for (alert of alerts; track $index) {\n    <mat-card class=\"mat-elevation-z3 alert-red\">\n      <mat-card-title>{{ alert.user.name }}</mat-card-title>\n      <mat-card-content>\n        <p>Alert:Your account has been inactive for {{alert.daysInactive}}days. Your documents will be archived soon if no action is taken.</p>\n      </mat-card-content>\n      <mat-card-actions>\n        <button mat-icon-button color=\"warn\" (click)=\"dismissAlert(alert?.id!)\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </mat-card-actions>\n    </mat-card>}\n    </div>\n    <div id=\"main\">\n        @for (notification of notifications; track $index) {\n            <div class=\"message\">\n                <h3>{{notification.user}}</h3>\n                <p>{{notification.message}}</p>\n                <div>\n                <mat-card-actions>\n                <button mat-icon-button color=\"warn\" (click)=\"dismissNotification($index)\">\n                <mat-icon>close</mat-icon>\n                </button>\n                </mat-card-actions>\n                </div>\n\n            </div>\n\n        }\n    </div>\n</div>\n", "/* src/app/notification/notification.css */\n* {\n  margin: 0;\n  padding: 0;\n}\nh1 {\n  text-align: center;\n  padding: 40px;\n}\n#main {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.message {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid black;\n  border-radius: 4px;\n  width: 500px;\n  padding: 10px;\n  padding-left: 30px;\n  gap: 10px;\n  margin-top: 20px;\n  box-shadow: 2px 3px 3px rgba(0, 0, 0, 0.4);\n}\n.header {\n  width: 95%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.alert-card {\n  margin: 10px 0;\n}\n.alert-red {\n  background-color: #d9adb4;\n}\nmat-card {\n  width: 70%;\n  margin: auto;\n}\nmat-card-title {\n  font-weight: bold;\n  align-self: center;\n}\nmat-card-actions {\n  display: flex;\n  justify-content: flex-end;\n}\n@media (max-width : 768px) {\n  .message {\n    width: 300px;\n  }\n}\n/*# sourceMappingURL=notification.css.map */\n", "import { Component } from '@angular/core';\nimport { Navbar } from \"../navbar/navbar\";\nimport { NotificationService } from '../services/notification.service';\nimport { UserService } from '../services/user.service';\nimport { UserModel } from '../models/user.model';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { AlertService, InactivityAlert } from '../services/inactive.alert';\nimport { switchMap } from 'rxjs';\n\n@Component({\n  selector: 'app-notification',\n  imports: [Navbar,MatCardModule,MatButtonModule, MatIconModule],\n  templateUrl: './notification.html',\n  styleUrl: './notification.css'\n})\nexport class Notification {\n  currentUser : UserModel | null = null;\n  notifications : {user : string, message : string}[] =[]\n  alerts : InactivityAlert[] =[]\n\n  constructor(private userService : UserService,private notifyService : NotificationService ,private alertservice:AlertService){\n   \n\n  }\n  ngOnInit(): void {\n    this.userService.user$.subscribe({\n      next: (data: any) => {\n        this.currentUser = data;\n\n        if (this.currentUser) {\n          this.alertservice.getActiveAlerts(this.currentUser, this.currentUser.id);\n        }\n      }\n    });\n\n    this.notifyService.notification$.subscribe({\n      next: (data: any) => {\n        this.notifications = data;\n      }\n    });\n\n    this.alertservice.alerts$.subscribe({\n      next: (data: any) => {\n        this.alerts = Array.isArray(data?.$values) ? data.$values : [];\n        console.log('alerts', this.alerts);\n      }\n    });\n  }\n    dismissAlert(alertId: string): void {\n  if (!this.currentUser) return;\n\n  this.alertservice.dismissAlert(this.currentUser, alertId, this.currentUser.id).subscribe({\n    next: () => {\n        this.alerts = this.alerts.filter(alert => alert.id !== alertId);\n\n      this.alertservice.getActiveAlerts(this.currentUser!, this.currentUser!.id);\n    }\n  });\n}\n\n  dismissNotification(index: number): void {\n    this.notifications.splice(index, 1);\n  }\n\n}\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { Notification } from './notification';\nimport { Component } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport { NotificationService } from '../services/notification.service';\nimport { of } from 'rxjs';\nimport { UserModel } from '../models/user.model';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { AlertService, InactivityAlert } from '../services/inactive.alert';\n\n\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  template: ''\n})\nclass FakeNavbar {}\n\ndescribe('Notification', () => {\n  let component: Notification;\n  let fixture: ComponentFixture<Notification>;\n\n  let userServiceSpy : jasmine.SpyObj<UserService>;\n  let notifyServiceSpy : jasmine.SpyObj<NotificationService>;\n  let alertServiceSpy : jasmine.SpyObj<AlertService>;\n\n  beforeEach(async () => {\n    notifyServiceSpy = jasmine.createSpyObj(\"NotificationService\",[\"startConnection\"],{ notification$: of([{ user: \"Test\", message: \"Test\" }]) });\n    userServiceSpy = jasmine.createSpyObj(\"UserService\",[\"getAll\"],{ user$: of(new UserModel(\"1\")) });\n        alertServiceSpy = jasmine.createSpyObj(\"AlertService\",[\"getActiveAlerts\"],{ alerts$: of([])});\n\n    await TestBed.configureTestingModule({\n      imports: [Notification,MatCardModule,MatButtonModule, MatIconModule],\n      providers : [\n        {provide : UserService, useValue : userServiceSpy},\n        {provide : NotificationService, useValue : notifyServiceSpy},\n        {provide : AlertService, useValue : alertServiceSpy},\n\n      ]\n    })\n    .compileComponents();\n\n    TestBed.overrideComponent(Notification, {\n\t\tset: {\n\t\timports: [\n\t\t\tFakeNavbar,MatCardModule,MatButtonModule, MatIconModule\n      \n\t\t\t]\n\t\t}\n\t});\n\n    // notifyServiceSpy.notification$ = of([{user: \"Test\", message:\"Test\"}]);\n    // userServiceSpy.user$ = of(new UserModel(\"1\"));\n    fixture = TestBed.createComponent(Notification);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n"],
  "mappings": "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",
  "names": ["notification_default", "init_notification", "Notification", "init_notification"]
}
