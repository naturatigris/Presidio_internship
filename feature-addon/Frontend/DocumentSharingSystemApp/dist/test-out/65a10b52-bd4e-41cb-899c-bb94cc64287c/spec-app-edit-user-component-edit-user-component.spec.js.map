{
  "version": 3,
  "sources": ["angular:jit:template:src/app/edit-user-component/edit-user-component.html", "angular:jit:style:src/app/edit-user-component/edit-user-component.css", "src/app/misc/passwordCheck.ts", "src/app/misc/confirmPasswordCheck.ts", "src/app/edit-user-component/edit-user-component.ts", "src/app/edit-user-component/edit-user-component.spec.ts"],
  "sourcesContent": ["<app-navbar></app-navbar>\n<div class=\"main\">\n    <div class=\"container\">\n        <div class=\"heading\">\n            <h1>{{action()}} User</h1>\n        </div>\n\n        @if(editUser != null){\n            <form [formGroup]=\"formGroup\" class=\"container form\">\n\n                <mat-form-field class=\"input\">\n                    <mat-label>Name</mat-label>\n                    <input \n                        matInput \n                        type=\"text\" \n                        formControlName=\"name\"\n                    >\n                        <!-- [disabled]=\"action() == 'Edit' && disabled()\" -->\n                        @if (fc.name?.hasError('required')) {\n                            <mat-error>Name is required</mat-error>\n                        }\n                        <!-- [(ngModel)]=\"editUser!.name\"  -->\n                    </mat-form-field>\n                    \n                    <mat-form-field class=\"input\">\n                        <mat-label>Email</mat-label>\n                        <input matInput \n                            type=\"text\" \n                            formControlName=\"email\"\n                            >\n                            <!-- [disabled]=\"action() == 'Edit' && disabled()\" -->\n                        @if (fc.email.hasError('required')) {\n                            <mat-error>Email is required</mat-error>\n                        }\n                        @if (fc.email.hasError('email')) {\n                            <mat-error>Invalid Email</mat-error>\n                        }\n                </mat-form-field>\n                    <mat-form-field class=\"input\">\n                        <mat-label>Team</mat-label>\n                        <mat-select \n                            formControlName=\"teamId\"\n                        >\n                            @for (t of teams; track $index) {\n                                <mat-option [value]=\"t.id\">{{t.name}} ({{t.id}})</mat-option>\n                            }\n                        </mat-select>\n                        @if (fc.teamId.hasError('required')) {\n                            <mat-error>Team is required</mat-error>\n                        }\n                </mat-form-field>\n                \n                <mat-form-field class=\"input\">\n                    <mat-label>{{ action() == 'Edit' ? 'Change Password' : 'Password'}}</mat-label>\n                    <input matInput \n                        [placeholder]=\"action() == 'Edit' ? 'Ignore if you don\\'t want to change password' : 'Password' \"\n                        [type]=\"hidePassword()? 'password' : 'text'\" \n                        formControlName=\"password\"\n                    >\n                        <!-- [disabled]=\"action() == 'Edit' && disabled()\" -->\n                    <!-- [(ngModel)]=\"newPassword\" -->\n                    <button\n                        matIconButton\n                        matSuffix\n                        (click)=\"passwordView()\"\n                        [attr.aria-pressed]=\"hidePassword()\"\n                    >\n                        <mat-icon>{{hidePassword() ? 'visibility_off' : 'visibility'}}</mat-icon>\n                    </button>\n                    \n                    @if(fc.password.hasError('required')){\n                        <mat-error>Password is required</mat-error>\n                    }\n                    @if(fc.password.hasError('passwordCheck')){\n                        <mat-error>{{fc.password.errors.passwordCheck}}</mat-error>\n                    }\n                </mat-form-field>\n            \n                <mat-form-field class=\"input\">\n                    <mat-label>{{ action() == 'Edit' ? 'Confirm Change Password' : 'Confirm Password'}}</mat-label>\n                    <input matInput \n                        [placeholder]=\"action() == 'Edit' ? 'Ignore if you don\\'t want to change password' : 'Confirm Password' \"\n                        [type]=\"hideConfirmPassword()? 'password' : 'text'\" \n                        formControlName=\"confirmPassword\"\n                    >\n                    <!-- [disabled]=\"action() == 'Edit' && disabled()\" -->\n                    <!-- [(ngModel)]=\"newConfirmPassword\" -->\n                    <button\n                        matIconButton\n                        matSuffix\n                        (click)=\"confirmPasswordView()\"\n                        [attr.aria-pressed]=\"hideConfirmPassword()\"\n                        >\n                        <!-- [disabled]=\"action() == 'Edit' && disabled()\" -->\n                        <mat-icon>{{hideConfirmPassword() ? 'visibility_off' : 'visibility'}}</mat-icon>\n                    </button>\n\n                    @if(fc.confirmPassword.hasError('required')){\n                        <mat-error>Confirm Password is required</mat-error>\n                    }\n                    @if(fc.confirmPassword.hasError('confirmPasswordCheck')&& (fc.confirmPassword.dirty || fc.confirmPassword.touched)){\n                        <mat-error>{{ fc.confirmPassword.getError('confirmPasswordCheck') }}</mat-error>\n                    }\n                   <!-- @if(formGroup.hasError('confirmPasswordCheck')  && (fc.confirmPassword.dirty || fc.confirmPassword.touched)){\n                        <mat-error>Error : {{ formGroup.getError('confirmPasswordCheck') }}</mat-error>\n                    } -->\n\n                </mat-form-field>\n\n\n                @if (currentUser?.role == 'Admin' || action() == 'Add') {\n                    <mat-form-field class=\"input\">\n                        <mat-label>Role</mat-label>\n                        <mat-select \n                        formControlName=\"role\"\n                        >\n                        <!-- [disabled]=\"action() == 'Edit' && disabled()\" -->\n                        <!-- [(ngModel)]=\"newRole\"  -->\n                        @for (r of roles; track $index) {\n                            <mat-option [value]=\"r\">{{r}}</mat-option>\n                        }\n                    </mat-select>\n                    @if(fc.role.hasError('required')){\n                        <mat-error>Role is required</mat-error>\n                    }\n                </mat-form-field>\n            }\n            <div class=\"buttons\">\n                <button \n                    matButton=\"tonal\" \n                    (click)=\"action() == 'Edit' ? handleUpdate() : handleAdd()\"\n                    [disabled]=\"formGroup.invalid\"\n                > \n                    {{action() == 'Edit' ? 'Update' : 'Add'}}\n                </button>\n                <button matButton=\"tonal\" routerLink=\"/users\">Back</button>\n                <!-- <button matButton=\"tonal\" (click)=\"test()\">Test</button> -->\n            </div>\n        </form>\n    }\n    </div>\n</div>", "/* src/app/edit-user-component/edit-user-component.css */\n.main {\n  width: 100%;\n  height: 92vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: 2px solid #dbe3f8;\n  border-radius: 8px;\n  padding: 30px;\n  gap: 20px;\n  box-shadow: 3px 3px 10px #dbe3f8;\n}\n.form {\n  box-shadow: none;\n  border: none;\n}\nh1 {\n  color: #3c67d2;\n}\n.input {\n  width: 500px;\n}\n.buttons {\n  display: flex;\n  justify-content: center;\n  gap: 40px;\n}\n@media screen and (max-width : 768px) {\n  .container {\n    padding: 20px;\n    width: 320px;\n  }\n  .form {\n    width: 300px;\n  }\n  .input {\n    width: 300px;\n  }\n}\n/*# sourceMappingURL=edit-user-component.css.map */\n", "import { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\nexport function passwordCheck() : ValidatorFn {\n    return (control : AbstractControl) : ValidationErrors | null => {\n        if(!control.value || control.value == null ){\n            return null;\n        }\n        const value = control.value as string;\n        let lower=0,upper=0,digit=0;\n        if(value?.length < 6){\n            return {passwordCheck : \"Min length should be 6\"};\n        }\n        value?.split('').forEach(v =>{\n            if(v >= \"0\" && v<=\"9\") digit++;\n            else if(v.toLowerCase() === v) lower++;\n            else if(v.toUpperCase() === v) upper++;\n        })\n        if(lower==0 || upper==0 || digit ==0){\n            return {passwordCheck : \"Password should contain atleast 1 uppercase, 1 lowercase and 1 digit\"};\n        }\n        return null;\n    }\n}", "import { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\nexport function confirmPasswordCheck() : ValidatorFn {\n    return (group : AbstractControl) : ValidationErrors | null => {\n        if(!group.get('password')?.value && !group.get('confirmPassword')?.value){\n            return null;\n        }\n        const password = group.get('password')?.value as string;\n        const confirmPassword = group.get('confirmPassword')?.value as string;\n        if(group.get('password')?.invalid){\n            group.get('confirmPassword')?.setErrors({confirmPasswordCheck : \"Password is invalid\"});\n            return{ confirmPasswordCheck : \"Password is invalid\"};\n        }\n        if(confirmPassword != password){\n            group.get('confirmPassword')?.setErrors({confirmPasswordCheck : \"Confirm Password should be same as password\"});\n            return{ confirmPasswordCheck : \"Confirm Password should be same as password\"};\n        }\n        return null;\n    }\n}\n", "import { Component, signal } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { UserModel } from '../models/user.model';\nimport { Navbar } from \"../navbar/navbar\";\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { UserUpdateModel } from '../models/user.update.model';\nimport { switchMap } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { UserAddModel } from '../models/user.add.model';\nimport { Store } from '@ngxs/store';\nimport { CurrentUserState } from '../current-user/current-user.state';\nimport { passwordCheck } from '../misc/passwordCheck';\nimport { confirmPasswordCheck } from '../misc/confirmPasswordCheck';\nimport { CommonModule } from '@angular/common';\nimport { TeamModel } from '../models/team.model';\nimport { TeamService } from '../services/team.service';\n\n@Component({\n  selector: 'app-edit-user-component',\n  imports: [Navbar,FormsModule, ReactiveFormsModule, CommonModule, RouterLink, MatFormFieldModule, MatInputModule, MatIconModule, MatButtonModule, MatSelectModule],\n  templateUrl: './edit-user-component.html',\n  styleUrl: './edit-user-component.css',\n\tproviders : [{provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'outline'}}]\n})\nexport class EditUserComponent {\n\tcurrentUser : UserModel | null = null;\n\teditUserId : string|null = \"\"\n\teditUser : UserModel | null = null;\n\thidePassword = signal(true);\n\thideConfirmPassword = signal(true);\n\tdisabled = signal(true);\n\taction = signal(\"\");\n\tnewRole : string = 'User';\n\tteams : TeamModel[] =[];\n\n\troles : string[] = ['Admin', 'User'];\n\n\tprivate snackBar : MatSnackBar = new MatSnackBar();\n\n\tformGroup : FormGroup = new FormGroup({});\n\n\n\tconstructor(private userService : UserService, private teamService : TeamService, private route:ActivatedRoute, private router : Router, private store : Store){\n\t\t\n\t\tthis.store.select(CurrentUserState.getUser).subscribe({\n\t\t\tnext : (data) => {\n\t\t\t\tthis.currentUser = data;\n\t\t\t}\n\t\t})\n\t\tif(this.currentUser == null){\n\t\t\tthis.userService.getCurrentUserDetails();\n\t\t\tif(this.currentUser == null)\n\t\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.teamService.getAllTeams(this.currentUser).subscribe({\n\t\t\tnext : (res : any) => {\n\t\t\t\tthis.teams = res.data.$values;\n\t\t\t\tconsole.log(this.teams);\n\t\t\t}\n\t\t})\n\n\t\tthis.editUserId = this.route.snapshot.paramMap.get('id');\n\n\t\tif(this.editUserId == null && this.route.snapshot.url[1].path == 'add'){\n\t\t\tconsole.log(this.route.snapshot.url[1].path == 'add');\n\t\t\tthis.editUser = new UserModel();\n\t\t\tthis.newRole = \"User\";\n\t\t\tthis.action.set(\"Add\");\n\n\t\t\tthis.formGroup = new FormGroup({\n\t\t\t\tname: new FormControl(null,[Validators.required]),\n\t\t\t\temail : new FormControl(null,[Validators.required, Validators.email]),\n\t\t\t\trole : new FormControl(null, Validators.required),\n\t\t\t\tteamId : new FormControl(null, Validators.required),\n\t\t\t\tpassword : new FormControl(null, [Validators.required, passwordCheck()]),\n\t\t\t\tconfirmPassword : new FormControl(null, Validators.required)\n\t\t\t},{validators : confirmPasswordCheck()});\n\t\t}\n\t\telse if(this.editUserId != null){\n\t\t\tthis.userService.getUserById(this.editUserId!).subscribe({\n\t\t\t\tnext : (res : any) =>{\n\t\t\t\t\tthis.editUser = res.data;\n\t\t\t\t\tthis.newRole = res.data.role;\n\t\t\t\t\tthis.action.set(\"Edit\");\n\t\t\t\t\t\n\t\t\t\t\tthis.formGroup = new FormGroup({\n\t\t\t\t\t\tname: new FormControl({value : this.editUser?.name, disabled : true},[Validators.required]),\n\t\t\t\t\t\temail : new FormControl({ value : this.editUser?.email, disabled : true},[Validators.required, Validators.email]),\n\t\t\t\t\t\trole : new FormControl({value : this.editUser?.role, disabled : true}, Validators.required),\n\t\t\t\t\t\tteamId : new FormControl({value : this.editUser?.teamId, disabled : true}, Validators.required),\n\t\t\t\t\t\tpassword : new FormControl({value : null, disabled: true},passwordCheck()),\n\t\t\t\t\t\tconfirmPassword : new FormControl({value : null, disabled: true})\n\t\t\t\t\t},{validators : confirmPasswordCheck()})\n\t\t\t\t},\n\t\t\t\terror : err => {\n\t\t\t\t\trouter.navigateByUrl('documents');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\telse{\n\t\t\trouter.navigateByUrl('documents');\n\t\t\treturn;\n\t\t}\n\t}\n\n\thandleUpdate(){\n\t\tif(this.disabled()){\n\t\t\tthis.disabled.set(false);\n\t\t\tthis.fc.name.enable();\n\t\t\tthis.fc.role.enable();\n\t\t\tthis.fc.teamId.enable();\n\t\t\tthis.fc.email.enable();\n\t\t\tthis.fc.password.enable();\n\t\t\tthis.fc.confirmPassword.enable();\n\t\t\treturn;\n\t\t}\n\n\t\tlet updatedUser = new UserUpdateModel(this.fc.name.value, this.fc.email.value,this.fc.teamId.value,null);\n\t\tif(!this.fc.password.value || this.fc.password.value != null || this.fc.password.value != \"\"){\n\t\t\tupdatedUser.password = this.fc.password.value;\n\t\t}\n\t\t// console.log(updatedUser);\n\t\tif(this.fc.role.value != this.editUser?.role){\n\t\t\tthis.userService.changeUserRoleById(this.editUser!.id, this.fc.role.value)\n\t\t\t.pipe(\n\t\t\t\tswitchMap(() => this.userService.updateUserById(this.editUser!.id,updatedUser))\n\t\t\t)\n\t\t\t.subscribe({\n\t\t\t\tnext : (res : any) => {\n\t\t\t\t\tthis.editUser = res.data;\n\t\t\t\t\tthis.disabled.set(true);\n\t\t\t\t\tthis.fc.name.disable();\n\t\t\t\t\tthis.fc.role.disable();\n\t\t\t\t\tthis.fc.teamId.disable();\n\t\t\t\t\tthis.fc.email.disable();\n\t\t\t\t\tthis.fc.password.disable();\n\t\t\t\t\tthis.fc.confirmPassword.disable();\n\t\t\t\t\t\n\t\t\t\t\tif(this.editUser?.id == this.currentUser?.id){\n\t\t\t\t\t\tthis.userService.getCurrentUserDetails().subscribe({\n\t\t\t\t\t\t\tnext : (user : UserModel | null) => {\n\t\t\t\t\t\t\t\tthis.currentUser = user;\n\t\t\t\t\t\t\t\tthis.router.navigateByUrl('/users');\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t// this.newPassword = null;\n\t\t\t\t\tthis.snackBar.open(\"User updated successfully!\", undefined, {duration: 3000});\n\t\t\t\t},\n\t\t\t\terror: (err) => {\n\t\t\t\t\tconsole.error(\"Error updating user role and data:\", err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t\tthis.userService.updateUserById(this.editUser!.id,updatedUser).subscribe({\n\t\t\t\tnext : (res : any) => {\n\t\t\t\t\tthis.editUser = res.data;\n\t\t\t\t\tthis.disabled.set(true);\n\t\t\t\t\tthis.fc.name.disable();\n\t\t\t\t\tthis.fc.role.disable();\n\t\t\t\t\tthis.fc.teamId.disable();\n\t\t\t\t\tthis.fc.email.disable();\n\t\t\t\t\tthis.fc.password.disable();\n\t\t\t\t\tthis.fc.confirmPassword.disable();\n\t\t\t\t\t// this.newPassword = null;\n\t\t\t\t\tthis.snackBar.open(\"User updated successfully!\", undefined, {duration: 3000});\n\t\t\t\t},\n\t\t\t\terror: (err) => {\n\t\t\t\t\tconsole.error(\"Error updating user : \", err.error.errors.message);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\thandleAdd(){\n\t\tlet newUser = new UserAddModel(this.fc.name.value, this.fc.role.value, this.fc.email.value,this.fc.teamId.value,this.fc.password.value as string);\n\t\tthis.userService.addUser(newUser).subscribe({\n\t\t\t\tnext : (res : any) =>{\n\t\t\t\t\tthis.editUser = res.data;\n\t\t\t\t\tthis.disabled.set(true);\n\t\t\t\t\t// this.action.set('Edit');\n\t\t\t\t\t// this.newPassword = null;\n\t\t\t\t\tthis.snackBar.open(\"User Added successfully!\", undefined, {duration: 3000});\n\t\t\t\t\tthis.router.navigateByUrl('/users');\n\t\t\t\t}\n\t\t\t});\n\n\t}\n\tpasswordView(){\n\t\tthis.hidePassword.set(!this.hidePassword());\n\t}\n\tconfirmPasswordView(){\n\t\tthis.hideConfirmPassword.set(!this.hideConfirmPassword());\n\t}\n\tget fc() : any {\n\t\treturn this.formGroup.controls;\n\t}\n\ttest(){\n\t\tconsole.log(this.formGroup);\n\t}\n}\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { EditUserComponent } from './edit-user-component';\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { TeamService } from '../services/team.service';\nimport { UserService } from '../services/user.service';\nimport { Component, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { of } from 'rxjs';\nimport { TeamModel } from '../models/team.model';\nimport { UserModel } from '../models/user.model';\n\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  template: ''\n})\nclass FakeNavbar {}\n\ndescribe('EditUserComponent', () => {\n  let component: EditUserComponent;\n  let fixture: ComponentFixture<EditUserComponent>;\n  let userService : jasmine.SpyObj<UserService>;\n  let teamService : jasmine.SpyObj<TeamService>; \n  let route: jasmine.SpyObj<ActivatedRoute>; \n  let router : jasmine.SpyObj<Router>; \n  let store : jasmine.SpyObj<Store>;\n\n  let user = new UserModel(\"1\");\n  let teamsList = [new TeamModel(1), new TeamModel(2)]\n  \n\n  beforeEach(async () => {\n    userService = jasmine.createSpyObj(\"UserService\",[\"getCurrentUserDetails\",\"getUserById\",\"updateUserById\",\"addUser\",\"logout\",\"changeUserRoleById\"])\n    teamService = jasmine.createSpyObj(\"TeamService\",[\"getAllTeams\"])\n    router = jasmine.createSpyObj(\"Router\",[\"navigateByUrl\",\"navigate\"]);\n    route = jasmine.createSpyObj(\"AcivatedRoute\",[\"navigate\"],\n        {snapshot: {\n          url : [null,{path: \"Add\"}], \n          paramMap: {\n            get: (id : string)=>{\n              return \"test\"\n            }\n          }\n        }});\n    store = jasmine.createSpyObj(\"Store\",[\"select\"]);\n\n    await TestBed.configureTestingModule({\n      imports: [EditUserComponent, FakeNavbar],\n      schemas : [NO_ERRORS_SCHEMA],\n      providers :[\n        FormsModule, \n        ReactiveFormsModule, \n        CommonModule, \n        RouterLink, \n        MatFormFieldModule, \n        MatInputModule, \n        MatIconModule, \n        MatButtonModule, \n        MatSelectModule,\n        {provide: UserService, useValue : userService},\n        {provide: TeamService, useValue : teamService},\n        {provide: ActivatedRoute, useValue : route},\n        {provide: Router, useValue : router},\n        {provide: Store, useValue : store},\n      ]\n    })\n    .compileComponents();\n\n    TestBed.overrideComponent(EditUserComponent, {\n\t\tset: {\n\t\timports: [\n\t\t\tFakeNavbar,\n\t\t\tFormsModule, \n        ReactiveFormsModule, \n        CommonModule, \n        RouterLink, \n        MatFormFieldModule, \n        MatInputModule, \n        MatIconModule, \n        MatButtonModule, \n        MatSelectModule,\n\t\t\t]\n\t\t}\n\t});\n\n      store.select.and.returnValue(of(user));\n      userService.getCurrentUserDetails.and.returnValue(of(user));\n      userService.getUserById.and.returnValue(of(user));\n      userService.addUser.and.returnValue(of({ data: user }));\n      userService.changeUserRoleById.and.returnValue(of({ data: user }));\n      teamService.getAllTeams.and.returnValue(of({ data: { $values: teamsList } }));\n\n    fixture = TestBed.createComponent(EditUserComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should get current user data', () => {\n    expect(component.currentUser).toBe(user);\n  });\n\n  it('should load teams', () => {\n    expect(teamService.getAllTeams).toHaveBeenCalledWith(component.currentUser!);\n    expect(component.teams).toEqual(teamsList);\n  });\n\n  it('should add user', () => {\n    component.formGroup = new FormGroup({\n      name: new FormControl('Test User'),\n      email: new FormControl('test@example.com'),\n      role: new FormControl('User'),\n      teamId: new FormControl(1),\n      password: new FormControl('Password123!'),\n      confirmPassword: new FormControl('Password123!')\n    });\n\n    component.handleAdd();\n\n    expect(userService.addUser).toHaveBeenCalled();\n  });\n  it('should update user', () => {\n\n    component.formGroup = new FormGroup({\n      name: new FormControl('Test User'),\n      email: new FormControl('test@example.com'),\n      role: new FormControl('User'),\n      teamId: new FormControl(1),\n      password: new FormControl('Password123!'),\n      confirmPassword: new FormControl('Password123!')\n    });\n\n\tcomponent.disabled.set(false);\n\tcomponent.editUser = user;\n    component.handleUpdate();\n    expect(userService.updateUserById).toHaveBeenCalled();\n  });\n});\n"],
  "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",
  "names": ["edit_user_component_default", "init_edit_user_component", "EditUserComponent", "init_edit_user_component"]
}
