{
  "version": 3,
  "sources": ["src/app/services/user.service.spec.ts"],
  "sourcesContent": ["import { TestBed } from \"@angular/core/testing\"\nimport { HttpClient, provideHttpClient } from \"@angular/common/http\"\nimport { HttpTestingController, provideHttpClientTesting } from \"@angular/common/http/testing\"\nimport { UserService } from \"./user.service\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { Router } from \"@angular/router\";\nimport { Store } from \"@ngxs/store\";\nimport { UserLoginModel } from \"../models/user.login.model\";\nimport { Observable, of } from \"rxjs\";\nimport { RemoveCurrentUserAction, SetCurrentUserAction } from \"../current-user/current-user.actions\";\nimport { UserModel } from \"../models/user.model\";\nimport { environment } from \"../../environments/environment\";\nimport { UserUpdateModel } from \"../models/user.update.model\";\nimport { UserSearchModel } from \"../models/user.search.model\";\nimport { UserAddModel } from \"../models/user.add.model\";\n\ndescribe('UserService', () => {\n    let service : UserService;\n    let httpSpy: jasmine.SpyObj<HttpClient>;\n    let routerSpy: jasmine.SpyObj<Router>;\n    let snackBarSpy: jasmine.SpyObj<MatSnackBar>;\n    let storeSpy: jasmine.SpyObj<Store>;\n\n    let creds = new UserLoginModel();\n    creds.email = 'test@example.com';\n    creds.password = 'password';\n\n    const mockResponse = {\n      accessToken: 'access-token',\n      refreshToken: 'refresh-token'\n    };\n    const mockUser = new UserModel(\"1\",\"Test\");\n    mockUser.accessToken = \"access-token\";\n\n    beforeEach(() => {\n        const http = jasmine.createSpyObj('HttpClient', ['post', 'get', 'put', 'delete']);\n        const router = jasmine.createSpyObj('Router', ['navigateByUrl']);\n        const snackBar = jasmine.createSpyObj('MatSnackBar', ['open']);\n        const store = jasmine.createSpyObj('Store', ['dispatch']);\n        TestBed.configureTestingModule({\n            imports : [],\n            providers : [\n                UserService, \n                { provide: HttpClient, useValue: http },\n                { provide: Router, useValue: router },\n                { provide: MatSnackBar, useValue: snackBar },\n                { provide: Store, useValue: store }\n            ]\n            \n        });\n        service = TestBed.inject(UserService);\n        httpSpy = TestBed.inject(HttpClient) as jasmine.SpyObj<HttpClient>;\n        routerSpy = TestBed.inject(Router) as jasmine.SpyObj<Router>;\n        snackBarSpy = TestBed.inject(MatSnackBar) as jasmine.SpyObj<MatSnackBar>;\n        storeSpy = TestBed.inject(Store) as jasmine.SpyObj<Store>;\n\n    })\n    \n    it('should be created', () => {\n        expect(service).toBeTruthy();\n    });\n    \n    it('should login successfully', () => {\n        httpSpy.post.and.returnValue(of(mockResponse));\n        spyOn(service, 'getCurrentUserDetails').and.returnValue(of(null));\n        \n        service.login(creds).subscribe((result: any) => {\n            expect(result).toEqual(jasmine.any(Observable));\n            expect(service.accessToken).toBe('access-token');\n            expect(service.refreshToken).toBe('refresh-token');\n            expect(localStorage.getItem('refreshToken')).toBe('refresh-token');\n            expect(routerSpy.navigateByUrl).toHaveBeenCalledWith('/documents');\n            \n        });\n    });\n    it('should logout successfully', async() => {\n        httpSpy.post.and.returnValue(of(mockResponse));\n            await service.logout();\n            expect(service.accessToken).toBe('');\n            expect(service.refreshToken).toBe('');\n            expect(localStorage.getItem('refreshToken')).toBeNull();\n            expect(service.user).toBeNull();\n            expect(storeSpy.dispatch).toHaveBeenCalledWith(new RemoveCurrentUserAction());\n            expect(routerSpy.navigateByUrl).toHaveBeenCalledWith('/');\n    });\n\n    it('should get current user details successfully', () => {\n        localStorage.clear();\n        localStorage.setItem('refreshToken', 'refresh-token');\n\n        const mockRefreshResponse = { accessToken: 'new-access-token' };\n        const mockMeResponse = { data: mockUser };\n        storeSpy.dispatch.and.returnValue(of());\n        httpSpy.post.and.returnValue(of(mockRefreshResponse));\n        httpSpy.get.and.returnValue(of(mockMeResponse));\n        \n        service.getCurrentUserDetails().subscribe((result) => {\n            expect(result).toEqual(jasmine.any(UserModel));\n            expect(service.accessToken).toBe('new-access-token');\n            expect(storeSpy.dispatch).toHaveBeenCalled();\n        });\n    });\n    \n    it(\"should get All Users\",() =>{\n        service.accessToken=\"access-token\";\n        httpSpy.get.and.returnValue(of({$values :[mockUser]}));\n\n        service.getAllUsers().subscribe((res)=>{\n            expect(res).toEqual({ $values: [mockUser] })\n            expect(httpSpy.get).toHaveBeenCalledOnceWith(environment.serverUrl+'/users/all',{\n                headers :{\n                    Authorization: `Bearer ${service.accessToken}`\n                }\n            })\n        });\n        \n    })\n    \n    it(\"should get User By Id\",() =>{\n        service.accessToken=\"access-token\";\n        httpSpy.get.and.returnValue(of({data :mockUser}));\n        \n        service.getUserById(\"1\").subscribe((res)=>{\n            expect(res).toEqual({ data: mockUser })\n            expect(httpSpy.get).toHaveBeenCalledOnceWith(environment.serverUrl+'/users/'+\"1\",{\n                headers :{\n                    Authorization: `Bearer ${service.accessToken}`\n                }\n            })\n        });\n        \n    })\n    it(\"should update User By Id\",() =>{\n        service.accessToken=\"access-token\";\n        httpSpy.put.and.returnValue(of({data :mockUser}));\n        let userUpdate = new UserUpdateModel()\n        \n        service.updateUserById(\"1\",userUpdate).subscribe((res)=> {\n            expect(res).toEqual({ data: mockUser })\n            expect(httpSpy.put).toHaveBeenCalledOnceWith(environment.serverUrl+'/users/'+\"1\",userUpdate,{\n                        headers :{\n                            Authorization: `Bearer ${service.accessToken}`\n                        }\n            })\n        });\n    })\n    it(\"should change User role By Id\",() =>{\n        service.accessToken=\"access-token\";\n        httpSpy.post.and.returnValue(of({data :mockUser}));\n        \n        service.changeUserRoleById(\"1\",\"Admin\").subscribe((res)=> {\n            expect(res).toEqual({ data: mockUser })\n            expect(httpSpy.post).toHaveBeenCalledOnceWith(environment.serverUrl+'/users/revoke/'+\"1\"+\"?role=\"+\"Admin\",null,{\n                headers :{\n                    Authorization: `Bearer ${service.accessToken}`\n                }\n            })\n        });\n    })\n    it(\"should delete User By Id\",() =>{\n        service.accessToken=\"access-token\";\n        httpSpy.delete.and.returnValue(of({data :mockUser}));\n        \n        service.deleteUserById(\"1\").subscribe((res)=> {\n            expect(res).toEqual({ data: mockUser })\n            expect(httpSpy.delete).toHaveBeenCalledOnceWith(environment.serverUrl+'/users/'+\"1\",{\n                        headers :{\n                            Authorization: `Bearer ${service.accessToken}`\n                        }\n            })\n        });\n    })\n    it(\"should revoke User By Id\",() =>{\n        service.accessToken=\"access-token\";\n        httpSpy.post.and.returnValue(of({data :mockUser}));\n        \n        service.revokeUserById(\"1\").subscribe((res)=> {\n            expect(res).toEqual({ data: mockUser })\n            expect(httpSpy.post).toHaveBeenCalledOnceWith(environment.serverUrl+'/users/revoke/'+\"1\",null,{\n                        headers :{\n                            Authorization: `Bearer ${service.accessToken}`\n                        }\n            })\n        });\n    })\n    it(\"should get User By Filter\",() =>{\n        service.accessToken=\"access-token\";\n        httpSpy.post.and.returnValue(of({data :mockUser}));\n        let userSearch = new UserSearchModel(null,null,null,null);\n        service.getByFilter(userSearch).subscribe((res)=> {\n            expect(res).toEqual({ data: mockUser })\n            expect(httpSpy.post).toHaveBeenCalledOnceWith(environment.serverUrl+'/users/filter',userSearch,{\n                        headers :{\n                            Authorization: `Bearer ${service.accessToken}`\n                        }\n            })\n        });\n    })\n    it(\"should add User\",() =>{\n        service.accessToken=\"access-token\";\n        httpSpy.post.and.returnValue(of({data :mockUser}));\n        let userAdd = new UserAddModel(\"\",\"\",\"\",1,\"\");\n        service.addUser(userAdd).subscribe((res)=> {\n            expect(res).toEqual({ data: mockUser })\n            expect(httpSpy.post).toHaveBeenCalledOnceWith(environment.serverUrl+'/users',userAdd,{\n                        headers :{\n                            Authorization: `Bearer ${service.accessToken}`\n                        }\n            })\n        });\n    })\n})"],
  "mappings": "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",
  "names": []
}
