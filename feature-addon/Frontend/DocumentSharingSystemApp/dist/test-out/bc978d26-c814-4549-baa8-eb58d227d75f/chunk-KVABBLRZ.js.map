{"version":3,"sources":["node_modules/@angular/cdk/fesm2022/dialog.mjs","node_modules/@angular/material/fesm2022/module-Ce6F7TNm.mjs","node_modules/@angular/material/fesm2022/dialog.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, ElementRef, NgZone, Renderer2, DOCUMENT, ChangeDetectorRef, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, InjectionToken, TemplateRef, Injectable, signal, EventEmitter, NgModule } from '@angular/core';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from './portal.mjs';\nexport { CdkPortal as ɵɵCdkPortal, PortalHostDirective as ɵɵPortalHostDirective, TemplatePortalDirective as ɵɵTemplatePortalDirective } from './portal.mjs';\nimport { F as FocusTrapFactory, I as InteractivityChecker, A as A11yModule } from './a11y-module-DHa4AVFz.mjs';\nimport { F as FocusMonitor } from './focus-monitor-DLjkiju1.mjs';\nimport { P as Platform } from './platform-DNDzkVcI.mjs';\nimport { c as _getFocusedElementPierceShadowDom } from './shadow-dom-B0oHn41l.mjs';\nimport { Subject, defer } from 'rxjs';\nimport { g as ESCAPE } from './keycodes-CpHkExLC.mjs';\nimport { hasModifierKey } from './keycodes.mjs';\nimport { startWith } from 'rxjs/operators';\nimport { s as createBlockScrollStrategy, O as OverlayContainer, c as createOverlayRef, i as OverlayConfig, f as createGlobalPositionStrategy, d as OverlayRef, t as OverlayModule } from './overlay-module-Bd2UplUU.mjs';\nimport { _ as _IdGenerator } from './id-generator-LuoRZSid.mjs';\nimport { D as Directionality } from './directionality-CChdj3az.mjs';\nimport './style-loader-B2sGQXxD.mjs';\nimport './private.mjs';\nimport './breakpoints-observer-QutrMj4x.mjs';\nimport './array-I1yfCXUO.mjs';\nimport './observers.mjs';\nimport './element-x4z00URv.mjs';\nimport './fake-event-detection-DWOdFTFz.mjs';\nimport './passive-listeners-esHZRgIN.mjs';\nimport '@angular/common';\nimport './test-environment-CT0XxPyp.mjs';\nimport './css-pixel-value-C_HEqLhI.mjs';\nimport './scrolling.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\nimport './recycle-view-repeater-strategy-SfuyU210.mjs';\nimport './data-source-D34wiQZj.mjs';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef;\n    /**\n     * Injector used for the instantiation of the component to be attached. If provided,\n     * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n     */\n    injector;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id;\n    /** The ARIA role of the dialog element. */\n    role = 'dialog';\n    /** Optional CSS class or classes applied to the overlay panel. */\n    panelClass = '';\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop = true;\n    /** Optional CSS class or classes applied to the overlay backdrop. */\n    backdropClass = '';\n    /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n    disableClose = false;\n    /** Function used to determine whether the dialog is allowed to close. */\n    closePredicate;\n    /** Width of the dialog. */\n    width = '';\n    /** Height of the dialog. */\n    height = '';\n    /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n    minWidth;\n    /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n    minHeight;\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. */\n    maxWidth;\n    /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n    maxHeight;\n    /** Strategy to use when positioning the dialog. Defaults to centering it on the page. */\n    positionStrategy;\n    /** Data being injected into the child component. */\n    data = null;\n    /** Layout direction for the dialog's content. */\n    direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n    ariaLabelledBy = null;\n    /** Dialog label applied via `aria-label` */\n    ariaLabel = null;\n    /**\n     * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n     * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n     * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n     */\n    ariaModal = false;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n    autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the previously-focused element upon closing.\n     * Has the following behavior based on the type that is passed in:\n     * - `boolean` - when true, will return focus to the element that was focused before the dialog\n     *    was opened, otherwise won't restore focus at all.\n     * - `string` - focus will be restored to the first element that matches the CSS selector.\n     * - `HTMLElement` - focus will be restored to the specific element.\n     */\n    restoreFocus = true;\n    /**\n     * Scroll strategy to be used for the dialog. This determines how\n     * the dialog responds to scrolling underneath the panel element.\n     */\n    scrollStrategy;\n    /**\n     * Whether the dialog should close when the user navigates backwards or forwards through browser\n     * history. This does not apply to navigation via anchor element unless using URL-hash based\n     * routing (`HashLocationStrategy` in the Angular router).\n     */\n    closeOnNavigation = true;\n    /**\n     * Whether the dialog should close when the dialog service is destroyed. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead.\n     */\n    closeOnDestroy = true;\n    /**\n     * Whether the dialog should close when the underlying overlay is detached. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n     * external detachment can happen as a result of a scroll strategy triggering it or when the\n     * browser location changes.\n     */\n    closeOnOverlayDetachments = true;\n    /**\n     * Whether the built-in overlay animations should be disabled.\n     */\n    disableAnimations = false;\n    /**\n     * Providers that will be exposed to the contents of the dialog. Can also\n     * be provided as a function in order to generate the providers lazily.\n     */\n    providers;\n    /**\n     * Component into which the dialog content will be rendered. Defaults to `CdkDialogContainer`.\n     * A configuration object can be passed in to customize the providers that will be exposed\n     * to the dialog container.\n     */\n    container;\n    /**\n     * Context that will be passed to template-based dialogs.\n     * A function can be passed in to resolve the context lazily.\n     */\n    templateContext;\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    _elementRef = inject(ElementRef);\n    _focusTrapFactory = inject(FocusTrapFactory);\n    _config;\n    _interactivityChecker = inject(InteractivityChecker);\n    _ngZone = inject(NgZone);\n    _focusMonitor = inject(FocusMonitor);\n    _renderer = inject(Renderer2);\n    _platform = inject(Platform);\n    _document = inject(DOCUMENT, { optional: true });\n    /** The portal outlet inside of this container into which the dialog content will be loaded. */\n    _portalOutlet;\n    /** The class that traps and manages focus within the dialog. */\n    _focusTrap = null;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    _elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n    _closeInteractionType = null;\n    /**\n     * Queue of the IDs of the dialog's label element, based on their definition order. The first\n     * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n     * where there are two or more titles in the DOM at a time and the first one is destroyed while\n     * the rest are present.\n     */\n    _ariaLabelledByQueue = [];\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _injector = inject(Injector);\n    _isDestroyed = false;\n    constructor() {\n        super();\n        // Callback is primarily for some internal tests\n        // that were instantiating the dialog container manually.\n        this._config = (inject(DialogConfig, { optional: true }) || new DialogConfig());\n        if (this._config.ariaLabelledBy) {\n            this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n        }\n    }\n    _addAriaLabelledBy(id) {\n        this._ariaLabelledByQueue.push(id);\n        this._changeDetectorRef.markForCheck();\n    }\n    _removeAriaLabelledBy(id) {\n        const index = this._ariaLabelledByQueue.indexOf(id);\n        if (index > -1) {\n            this._ariaLabelledByQueue.splice(index, 1);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._isDestroyed = true;\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal = (portal) => {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachDomPortal(portal);\n        this._contentAttached();\n        return result;\n    };\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    deregisterBlur();\n                    deregisterMousedown();\n                    element.removeAttribute('tabindex');\n                };\n                const deregisterBlur = this._renderer.listen(element, 'blur', callback);\n                const deregisterMousedown = this._renderer.listen(element, 'mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus(options) {\n        if (this._isDestroyed) {\n            return;\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait until after the next render.\n        afterNextRender(() => {\n            const element = this._elementRef.nativeElement;\n            switch (this._config.autoFocus) {\n                case false:\n                case 'dialog':\n                    // Ensure that focus is on the dialog container. It's possible that a different\n                    // component tried to move focus while the open animation was running. See:\n                    // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                    // if the focus isn't inside the dialog already, because it's possible that the consumer\n                    // turned off `autoFocus` in order to move focus themselves.\n                    if (!this._containsFocus()) {\n                        element.focus(options);\n                    }\n                    break;\n                case true:\n                case 'first-tabbable':\n                    const focusedSuccessfully = this._focusTrap?.focusInitialElement(options);\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer(options);\n                    }\n                    break;\n                case 'first-heading':\n                    this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]', options);\n                    break;\n                default:\n                    this._focusByCssSelector(this._config.autoFocus, options);\n                    break;\n            }\n        }, { injector: this._injector });\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer(options) {\n        // Note that there is no focus method when rendering on the server.\n        this._elementRef.nativeElement.focus?.(options);\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            // Save the previously focused element. This element will be re-focused\n            // when the dialog closes.\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDialogContainer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkDialogContainer, isStandalone: true, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\\n\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [CdkPortalOutlet], host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    overlayRef;\n    config;\n    /**\n     * Instance of component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentInstance;\n    /**\n     * `ComponentRef` of the component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentRef;\n    /** Instance of the container that is rendering out the dialog content. */\n    containerInstance;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose;\n    /** Emits when the dialog has been closed. */\n    closed = new Subject();\n    /** Emits when the backdrop of the dialog is clicked. */\n    backdropClick;\n    /** Emits when on keyboard events within the dialog. */\n    keydownEvents;\n    /** Emits on pointer events that happen outside of the dialog. */\n    outsidePointerEvents;\n    /** Unique ID for the dialog. */\n    id;\n    /** Subscription to external detachments of the dialog. */\n    _detachSubscription;\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose && this._canClose()) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n            else {\n                // Clicking on the backdrop will move focus out of dialog.\n                // Recapture it if closing via the backdrop is disabled.\n                this.containerInstance._recaptureFocus?.();\n            }\n        });\n        this._detachSubscription = overlayRef.detachments().subscribe(() => {\n            // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n            if (config.closeOnOverlayDetachments !== false) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this._canClose(result)) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            // Drop the detach subscription first since it can be triggered by the\n            // `dispose` call and override the result of this closing sequence.\n            this._detachSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Whether the dialog is allowed to close. */\n    _canClose(result) {\n        const config = this.config;\n        return (!!this.containerInstance &&\n            (!config.closePredicate || config.closePredicate(result, config, this.componentInstance)));\n    }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n    providedIn: 'root',\n    factory: () => {\n        const injector = inject(Injector);\n        return () => createBlockScrollStrategy(injector);\n    },\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n\nfunction getDirectionality(value) {\n    const valueSignal = signal(value);\n    const change = new EventEmitter();\n    return {\n        valueSignal,\n        get value() {\n            return valueSignal();\n        },\n        change,\n        ngOnDestroy() {\n            change.complete();\n        },\n    };\n}\nclass Dialog {\n    _injector = inject(Injector);\n    _defaultOptions = inject(DEFAULT_DIALOG_CONFIG, { optional: true });\n    _parentDialog = inject(Dialog, { optional: true, skipSelf: true });\n    _overlayContainer = inject(OverlayContainer);\n    _idGenerator = inject(_IdGenerator);\n    _openDialogsAtThisLevel = [];\n    _afterAllClosedAtThisLevel = new Subject();\n    _afterOpenedAtThisLevel = new Subject();\n    _ariaHiddenElements = new Map();\n    _scrollStrategy = inject(DIALOG_SCROLL_STRATEGY);\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    afterAllClosed = defer(() => this.openDialogs.length\n        ? this._getAfterAllClosed()\n        : this._getAfterAllClosed().pipe(startWith(undefined)));\n    constructor() { }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || this._idGenerator.getId('cdk-dialog-');\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = createOverlayRef(this._injector, overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                createGlobalPositionStrategy().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n            disableAnimations: config.disableAnimations,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }));\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentRef = contentRef;\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, { optional: true }))) {\n            providers.push({\n                provide: Directionality,\n                useValue: getDirectionality(config.direction),\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Dialog, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Dialog, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\nclass DialogModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: DialogModule, imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer], exports: [\n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule,\n            CdkDialogContainer] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DialogModule, providers: [Dialog], imports: [OverlayModule, PortalModule, A11yModule, \n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    providers: [Dialog],\n                }]\n        }] });\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError, CdkPortalOutlet as ɵɵCdkPortalOutlet };\n\n","import { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { createBlockScrollStrategy, createGlobalPositionStrategy, OverlayModule } from '@angular/cdk/overlay';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, inject, Injector, Injectable, ElementRef, Directive, Input, NgModule } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef;\n    /**\n     * Injector used for the instantiation of the component to be attached. If provided,\n     * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n     */\n    injector;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id;\n    /** The ARIA role of the dialog element. */\n    role = 'dialog';\n    /** Custom class for the overlay pane. */\n    panelClass = '';\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop = true;\n    /** Custom class for the backdrop. */\n    backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n    disableClose = false;\n    /** Function used to determine whether the dialog is allowed to close. */\n    closePredicate;\n    /** Width of the dialog. */\n    width = '';\n    /** Height of the dialog. */\n    height = '';\n    /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n    minWidth;\n    /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n    minHeight;\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. */\n    maxWidth;\n    /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n    maxHeight;\n    /** Position overrides. */\n    position;\n    /** Data being injected into the child component. */\n    data = null;\n    /** Layout direction for the dialog's content. */\n    direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n    ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n    ariaLabel = null;\n    /**\n     * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n     * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n     * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n     */\n    ariaModal = false;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n    autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus = true;\n    /** Whether to wait for the opening animation to finish before trapping focus. */\n    delayFocusTrap = true;\n    /** Scroll strategy to be used for the dialog. */\n    scrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation = true;\n    /**\n     * Duration of the enter animation in ms.\n     * Should be a number, string type is deprecated.\n     * @breaking-change 17.0.0 Remove string signature.\n     */\n    enterAnimationDuration;\n    /**\n     * Duration of the exit animation in ms.\n     * Should be a number, string type is deprecated.\n     * @breaking-change 17.0.0 Remove string signature.\n     */\n    exitAnimationDuration;\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\nclass MatDialogContainer extends CdkDialogContainer {\n    /** Emits when an animation state changes. */\n    _animationStateChanged = new EventEmitter();\n    /** Whether animations are enabled. */\n    _animationsEnabled = !_animationsDisabled();\n    /** Number of actions projected in the dialog. */\n    _actionSectionCount = 0;\n    /** Host element of the dialog container component. */\n    _hostElement = this._elementRef.nativeElement;\n    /** Duration of the dialog open animation. */\n    _enterAnimationDuration = this._animationsEnabled\n        ? (parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION)\n        : 0;\n    /** Duration of the dialog close animation. */\n    _exitAnimationDuration = this._animationsEnabled\n        ? (parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION)\n        : 0;\n    /** Current timer for dialog animations. */\n    _animationTimer = null;\n    _contentAttached() {\n        // Delegate to the original dialog-container initialization (i.e. saving the\n        // previous element, setting up the focus trap and moving focus to the container).\n        super._contentAttached();\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\n        // the dialog animation for us, but there are a few reasons why we just leverage\n        // their styles and not use the runtime foundation code:\n        //   1. Foundation does not allow us to disable animations.\n        //   2. Foundation contains unnecessary features we don't need and aren't\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n        this._startOpenAnimation();\n    }\n    /** Starts the dialog open animation if enabled. */\n    _startOpenAnimation() {\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._enterAnimationDuration });\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            // One would expect that the open class is added once the animation finished, but MDC\n            // uses the open class in combination with the opening class to start the animation.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n            this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n        }\n        else {\n            this._hostElement.classList.add(OPEN_CLASS);\n            // Note: We could immediately finish the dialog opening here with noop animations,\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n            // Executing this immediately would mean that `afterOpened` emits synchronously\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n            Promise.resolve().then(() => this._finishDialogOpen());\n        }\n    }\n    /**\n     * Starts the exit animation of the dialog if enabled. This method is\n     * called by the dialog ref.\n     */\n    _startExitAnimation() {\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._exitAnimationDuration });\n        this._hostElement.classList.remove(OPEN_CLASS);\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n            this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n        }\n        else {\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n            // animation state event if animations are disabled, the overlay would be disposed\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n            // skipped. We work around this by waiting with the dialog close until the next tick when\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n            //      Also this issue is specific to the MDC implementation where the dialog could\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n            //      and closing always takes at least a tick.\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\n            // animations, the defer is applied here.\n            Promise.resolve().then(() => this._finishDialogClose());\n        }\n    }\n    /**\n     * Updates the number action sections.\n     * @param delta Increase/decrease in the number of sections.\n     */\n    _updateActionSectionCount(delta) {\n        this._actionSectionCount += delta;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Completes the dialog open by clearing potential animation classes, trapping\n     * focus and emitting an opened event.\n     */\n    _finishDialogOpen = () => {\n        this._clearAnimationClasses();\n        this._openAnimationDone(this._enterAnimationDuration);\n    };\n    /**\n     * Completes the dialog close by clearing potential animation classes, restoring\n     * focus and emitting a closed event.\n     */\n    _finishDialogClose = () => {\n        this._clearAnimationClasses();\n        this._animationStateChanged.emit({ state: 'closed', totalTime: this._exitAnimationDuration });\n    };\n    /** Clears all dialog animation classes. */\n    _clearAnimationClasses() {\n        this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n    }\n    _waitForAnimationToComplete(duration, callback) {\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n        // Note that we want this timer to run inside the NgZone, because we want\n        // the related events like `afterClosed` to be inside the zone as well.\n        this._animationTimer = setTimeout(callback, duration);\n    }\n    /** Runs a callback in `requestAnimationFrame`, if available. */\n    _requestAnimationFrame(callback) {\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame === 'function') {\n                requestAnimationFrame(callback);\n            }\n            else {\n                callback();\n            }\n        });\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n    }\n    attachComponentPortal(portal) {\n        // When a component is passed into the dialog, the host element interrupts\n        // the `display:flex` from affecting the dialog title, content, and\n        // actions. To fix this, we make the component host `display: contents` by\n        // marking its host with the `mat-mdc-dialog-component-host` class.\n        //\n        // Note that this problem does not exist when a template ref is used since\n        // the title, contents, and actions are then nested directly under the\n        // dialog surface.\n        const ref = super.attachComponentPortal(portal);\n        ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n        return ref;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatDialogContainer, isStandalone: true, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\", \"class.mat-mdc-dialog-container-with-actions\": \"_actionSectionCount > 0\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 560px);min-width:var(--mat-dialog-container-min-width, 280px)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, calc(100vw - 32px))}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, none);border-radius:var(--mat-dialog-container-shape, var(--mat-sys-corner-extra-large, 4px));background-color:var(--mat-dialog-container-color, var(--mat-sys-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 6px 24px 13px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mat-dialog-subhead-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-dialog-subhead-font, var(--mat-sys-headline-small-font, inherit));line-height:var(--mat-dialog-subhead-line-height, var(--mat-sys-headline-small-line-height, 1.5rem));font-size:var(--mat-dialog-subhead-size, var(--mat-sys-headline-small-size, 1rem));font-weight:var(--mat-dialog-subhead-weight, var(--mat-sys-headline-small-weight, 400));letter-spacing:var(--mat-dialog-subhead-tracking, var(--mat-sys-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mat-dialog-supporting-text-color, var(--mat-sys-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mat-dialog-supporting-text-font, var(--mat-sys-body-medium-font, inherit));line-height:var(--mat-dialog-supporting-text-line-height, var(--mat-sys-body-medium-line-height, 1.5rem));font-size:var(--mat-dialog-supporting-text-size, var(--mat-sys-body-medium-size, 1rem));font-weight:var(--mat-dialog-supporting-text-weight, var(--mat-sys-body-medium-weight, 400));letter-spacing:var(--mat-dialog-supporting-text-tracking, var(--mat-sys-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px 0)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;box-sizing:border-box;min-height:52px;margin:0;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 16px 24px);justify-content:var(--mat-dialog-actions-alignment, flex-end)}@media(forced-colors: active){.mat-mdc-dialog-actions{border-top-color:CanvasText}}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\\n\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [CdkPortalOutlet], host: {\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                        '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0',\n                    }, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 560px);min-width:var(--mat-dialog-container-min-width, 280px)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, calc(100vw - 32px))}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, none);border-radius:var(--mat-dialog-container-shape, var(--mat-sys-corner-extra-large, 4px));background-color:var(--mat-dialog-container-color, var(--mat-sys-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 6px 24px 13px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mat-dialog-subhead-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-dialog-subhead-font, var(--mat-sys-headline-small-font, inherit));line-height:var(--mat-dialog-subhead-line-height, var(--mat-sys-headline-small-line-height, 1.5rem));font-size:var(--mat-dialog-subhead-size, var(--mat-sys-headline-small-size, 1rem));font-weight:var(--mat-dialog-subhead-weight, var(--mat-sys-headline-small-weight, 400));letter-spacing:var(--mat-dialog-subhead-tracking, var(--mat-sys-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mat-dialog-supporting-text-color, var(--mat-sys-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mat-dialog-supporting-text-font, var(--mat-sys-body-medium-font, inherit));line-height:var(--mat-dialog-supporting-text-line-height, var(--mat-sys-body-medium-line-height, 1.5rem));font-size:var(--mat-dialog-supporting-text-size, var(--mat-sys-body-medium-size, 1rem));font-weight:var(--mat-dialog-supporting-text-weight, var(--mat-sys-body-medium-weight, 400));letter-spacing:var(--mat-dialog-supporting-text-tracking, var(--mat-sys-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px 0)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;box-sizing:border-box;min-height:52px;margin:0;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 16px 24px);justify-content:var(--mat-dialog-actions-alignment, flex-end)}@media(forced-colors: active){.mat-mdc-dialog-actions{border-top-color:CanvasText}}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\\n\"] }]\n        }] });\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n    if (time == null) {\n        return null;\n    }\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (time.endsWith('ms')) {\n        return coerceNumberProperty(time.substring(0, time.length - 2));\n    }\n    if (time.endsWith('s')) {\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n    }\n    if (time === '0') {\n        return 0;\n    }\n    return null; // anything else is invalid.\n}\n\nvar MatDialogState;\n(function (MatDialogState) {\n    MatDialogState[MatDialogState[\"OPEN\"] = 0] = \"OPEN\";\n    MatDialogState[MatDialogState[\"CLOSING\"] = 1] = \"CLOSING\";\n    MatDialogState[MatDialogState[\"CLOSED\"] = 2] = \"CLOSED\";\n})(MatDialogState || (MatDialogState = {}));\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    _ref;\n    _config;\n    _containerInstance;\n    /** The instance of component opened into the dialog. */\n    componentInstance;\n    /**\n     * `ComponentRef` of the component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentRef;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose;\n    /** Unique ID for the dialog. */\n    id;\n    /** Subject for notifying the user that the dialog has finished opening. */\n    _afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n    _beforeClosed = new Subject();\n    /** Result to be passed to afterClosed. */\n    _result;\n    /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n    _closeFallbackTimeout;\n    /** Current state of the dialog. */\n    _state = MatDialogState.OPEN;\n    // TODO(crisbeto): we shouldn't have to declare this property, because `DialogRef.close`\n    // already has a second `options` parameter that we can use. The problem is that internal tests\n    // have assertions like `expect(MatDialogRef.close).toHaveBeenCalledWith(foo)` which will break,\n    // because it'll be called with two arguments by things like `MatDialogClose`.\n    /** Interaction that caused the dialog to close. */\n    _closeInteractionType;\n    constructor(_ref, _config, _containerInstance) {\n        this._ref = _ref;\n        this._config = _config;\n        this._containerInstance = _containerInstance;\n        this.disableClose = _config.disableClose;\n        this.id = _ref.id;\n        // Used to target panels specifically tied to dialogs.\n        _ref.addPanelClass('mat-mdc-dialog-panel');\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        const closePredicate = this._config.closePredicate;\n        if (closePredicate && !closePredicate(dialogResult, this._config, this.componentInstance)) {\n            return;\n        }\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = MatDialogState.CLOSING;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = MatDialogState.CLOSED;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const injector = inject(Injector);\n        return () => createBlockScrollStrategy(injector);\n    },\n});\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    _defaultOptions = inject(MAT_DIALOG_DEFAULT_OPTIONS, { optional: true });\n    _scrollStrategy = inject(MAT_DIALOG_SCROLL_STRATEGY);\n    _parentDialog = inject(MatDialog, { optional: true, skipSelf: true });\n    _idGenerator = inject(_IdGenerator);\n    _injector = inject(Injector);\n    _dialog = inject(Dialog);\n    _animationsDisabled = _animationsDisabled();\n    _openDialogsAtThisLevel = [];\n    _afterAllClosedAtThisLevel = new Subject();\n    _afterOpenedAtThisLevel = new Subject();\n    dialogConfigClass = MatDialogConfig;\n    _dialogRefConstructor;\n    _dialogContainerType;\n    _dialogDataToken;\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    afterAllClosed = defer(() => this.openDialogs.length\n        ? this._getAfterAllClosed()\n        : this._getAfterAllClosed().pipe(startWith(undefined)));\n    constructor() {\n        this._dialogRefConstructor = MatDialogRef;\n        this._dialogContainerType = MatDialogContainer;\n        this._dialogDataToken = MAT_DIALOG_DATA;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || this._idGenerator.getId('mat-mdc-dialog-');\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: createGlobalPositionStrategy(this._injector)\n                .centerHorizontally()\n                .centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Closing is tied to our animation so the close predicate has to be implemented separately.\n            closePredicate: undefined,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            // Disable closing on detachments so that we can sync up the animation.\n            // The Material dialog ref handles this manually.\n            closeOnOverlayDetachments: false,\n            disableAnimations: this._animationsDisabled ||\n                config.enterAnimationDuration?.toLocaleString() === '0' ||\n                config.exitAnimationDuration?.toString() === '0',\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: this.dialogConfigClass, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentRef = cdkRef.componentRef;\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialog, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialog, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    dialogRef = inject(MatDialogRef, { optional: true });\n    _elementRef = inject(ElementRef);\n    _dialog = inject(MatDialog);\n    /** Screen-reader label for the button. */\n    ariaLabel;\n    /** Default to \"button\" to prevents accidental form submits. */\n    type = 'button';\n    /** Dialog close input. */\n    dialogResult;\n    _matDialogClose;\n    constructor() { }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogClose, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatDialogClose, isStandalone: true, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\nclass MatDialogLayoutSection {\n    _dialogRef = inject(MatDialogRef, { optional: true });\n    _elementRef = inject(ElementRef);\n    _dialog = inject(MatDialog);\n    constructor() { }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                this._onAdd();\n            });\n        }\n    }\n    ngOnDestroy() {\n        // Note: we null check because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        const instance = this._dialogRef?._containerInstance;\n        if (instance) {\n            Promise.resolve().then(() => {\n                this._onRemove();\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogLayoutSection, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatDialogLayoutSection, isStandalone: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogLayoutSection, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [] });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle extends MatDialogLayoutSection {\n    id = inject(_IdGenerator).getId('mat-mdc-dialog-title-');\n    _onAdd() {\n        // Note: we null check the queue, because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n    }\n    _onRemove() {\n        this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogTitle, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatDialogTitle, isStandalone: true, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatDialogContent, isStandalone: true, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, hostDirectives: [{ directive: i1.CdkScrollable }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\n                    hostDirectives: [CdkScrollable],\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions extends MatDialogLayoutSection {\n    /**\n     * Horizontal alignment of action buttons.\n     */\n    align;\n    _onAdd() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n    }\n    _onRemove() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogActions, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatDialogActions, isStandalone: true, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-start\": \"align === \\\"start\\\"\", \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: {\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n                        '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\nconst DIRECTIVES = [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n];\nclass MatDialogModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogModule, imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent], exports: [MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatDialog],\n                }]\n        }] });\n\nexport { MatDialogActions as M, _closeDialogVia as _, MatDialogClose as a, MatDialogTitle as b, MatDialogContent as c, MatDialogContainer as d, MAT_DIALOG_DATA as e, MAT_DIALOG_DEFAULT_OPTIONS as f, MAT_DIALOG_SCROLL_STRATEGY as g, MatDialog as h, MatDialogConfig as i, MatDialogState as j, MatDialogRef as k, MatDialogModule as l };\n\n","export { e as MAT_DIALOG_DATA, f as MAT_DIALOG_DEFAULT_OPTIONS, g as MAT_DIALOG_SCROLL_STRATEGY, h as MatDialog, M as MatDialogActions, a as MatDialogClose, i as MatDialogConfig, d as MatDialogContainer, c as MatDialogContent, l as MatDialogModule, k as MatDialogRef, j as MatDialogState, b as MatDialogTitle, _ as _closeDialogVia } from './module-Ce6F7TNm.mjs';\nimport '@angular/cdk/dialog';\nimport '@angular/cdk/overlay';\nimport '@angular/cdk/portal';\nimport '@angular/core';\nimport '@angular/cdk/coercion';\nimport './animation-DfMFjxHu.mjs';\nimport '@angular/cdk/layout';\nimport 'rxjs';\nimport 'rxjs/operators';\nimport '@angular/cdk/keycodes';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/scrolling';\nimport './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/bidi';\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n * @deprecated Will stop being exported.\n * @breaking-change 21.0.0\n */\nconst _defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matDialogAnimations = {\n    // Represents:\n    // trigger('dialogContainer', [\n    //   // Note: The `enter` animation transitions to `transform: none`, because for some reason\n    //   // specifying the transform explicitly, causes IE both to blur the dialog content and\n    //   // decimate the animation performance. Leaving it as `none` solves both issues.\n    //   state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n    //   state('enter', style({transform: 'none'})),\n    //   transition(\n    //     '* => enter',\n    //     group([\n    //       animate(\n    //         '{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)',\n    //         style({transform: 'none', opacity: 1}),\n    //       ),\n    //       query('@*', animateChild(), {optional: true}),\n    //     ]),\n    //     _defaultParams,\n    //   ),\n    //   transition(\n    //     '* => void, * => exit',\n    //     group([\n    //       animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0})),\n    //       query('@*', animateChild(), {optional: true}),\n    //     ]),\n    //     _defaultParams,\n    //   ),\n    // ])\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: {\n        type: 7,\n        name: 'dialogContainer',\n        definitions: [\n            {\n                type: 0,\n                name: 'void, exit',\n                styles: { type: 6, styles: { opacity: 0, transform: 'scale(0.7)' }, offset: null },\n            },\n            {\n                type: 0,\n                name: 'enter',\n                styles: { type: 6, styles: { transform: 'none' }, offset: null },\n            },\n            {\n                type: 1,\n                expr: '* => enter',\n                animation: {\n                    type: 3,\n                    steps: [\n                        {\n                            type: 4,\n                            styles: { type: 6, styles: { transform: 'none', opacity: 1 }, offset: null },\n                            timings: '{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)',\n                        },\n                        {\n                            type: 11,\n                            selector: '@*',\n                            animation: { type: 9, options: null },\n                            options: { optional: true },\n                        },\n                    ],\n                    options: null,\n                },\n                options: { params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' } },\n            },\n            {\n                type: 1,\n                expr: '* => void, * => exit',\n                animation: {\n                    type: 3,\n                    steps: [\n                        {\n                            type: 4,\n                            styles: { type: 6, styles: { opacity: 0 }, offset: null },\n                            timings: '{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)',\n                        },\n                        {\n                            type: 11,\n                            selector: '@*',\n                            animation: { type: 9, options: null },\n                            options: { optional: true },\n                        },\n                    ],\n                    options: null,\n                },\n                options: { params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' } },\n            },\n        ],\n        options: {},\n    },\n};\n\nexport { _defaultParams, matDialogAnimations };\n\n"],"mappings":"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","names":["MatDialogState","init_dialog"],"x_google_ignoreList":[0,1,2]}