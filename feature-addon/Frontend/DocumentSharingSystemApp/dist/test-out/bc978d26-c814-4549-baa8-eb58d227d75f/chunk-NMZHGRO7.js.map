{
  "version": 3,
  "sources": ["src/app/services/document.service.ts", "src/app/models/document.details.model.ts"],
  "sourcesContent": ["import { HttpClient } from \"@angular/common/http\";\nimport { inject, Injectable } from \"@angular/core\";\nimport { UserModel } from \"../models/user.model\";\nimport { environment } from \"../../environments/environment\";\nimport { DocumentSearchModel } from \"../models/document.search.model\";\nimport { DocumentDetailsModel } from \"../models/document.details.model\";\n\n@Injectable()\nexport class DocumentService {\n    private http = inject(HttpClient);\n    user : UserModel | null = null;\n\n    getAll(user: UserModel| null){\n        if(user!=null){\n            return this.http.get(environment.serverUrl+'/documents',{\n                headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                }\n            })\n\n        }\n        return null;\n    }\n\n    getByFilter(user: UserModel, documentSearch : DocumentSearchModel){\n        // if(user!=null){\n            return this.http.post(environment.serverUrl+'/documents/filter',documentSearch, {\n                headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                }\n            })\n        // }\n        // return null;\n    }\n    deleteDocument(user : UserModel, id : string) {\n        return this.http.delete(environment.serverUrl+'/documents/'+id, {\n                headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                }\n            })\n    }\n    downloadDocument(user : UserModel, id : string) {\n        return this.http.get(environment.serverUrl+'/documents/download/'+id, {\n                headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                },\n                responseType : 'blob'\n            })\n    }\n    uploadDocument(user : UserModel,fileData : DocumentDetailsModel,document : File) {\n        console.log(\"Document:\", document);\n        console.log(\"Is file:\", document instanceof File);\n        let formData = new FormData();\n        formData.append('description',fileData.description??\"\");\n        formData.append('teamId', fileData.teamId.toString());\n        formData.append('visibility',fileData.visibility??\"Public\");\n        formData.append('formFile',document);\n        return this.http.post(environment.serverUrl+'/documents/upload',formData, {\n                headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                }\n            })\n    }\n    getDocumentById(user : UserModel, id : string){\n        return this.http.get(environment.serverUrl+'/documents/'+id, {\n                headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                }\n            })\n    }\n    updateDocumentDetails(user : UserModel, id : string, fileDate : DocumentDetailsModel){\n        return this.http.put(environment.serverUrl+'/documents/'+id,fileDate ,{\n                headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                }\n            })\n    }\n}", "export class DocumentDetailsModel {\n    constructor(\n        public description : string | null = null,\n        public teamId : number =0,\n        public visibility : string | null = 'Public',\n        public isAccessRequested:boolean|null=false\n    ){}\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;IAQa;;;;;AARb;AACA;AAEA;AAKO,IAAM,kBAAN,MAAMA,iBAAe;MAChB,OAAO,OAAO,UAAU;MAChC,OAA0B;MAE1B,OAAO,MAAqB;AACxB,YAAG,QAAM,MAAK;AACV,iBAAO,KAAK,KAAK,IAAI,YAAY,YAAU,cAAa;YACpD,SAAU;cACN,eAAgB,UAAU,KAAK,WAAW;;WAEjD;QAEL;AACA,eAAO;MACX;MAEA,YAAY,MAAiB,gBAAoC;AAEzD,eAAO,KAAK,KAAK,KAAK,YAAY,YAAU,qBAAoB,gBAAgB;UAC5E,SAAU;YACN,eAAgB,UAAU,KAAK,WAAW;;SAEjD;MAGT;MACA,eAAe,MAAkB,IAAW;AACxC,eAAO,KAAK,KAAK,OAAO,YAAY,YAAU,gBAAc,IAAI;UACxD,SAAU;YACN,eAAgB,UAAU,KAAK,WAAW;;SAEjD;MACT;MACA,iBAAiB,MAAkB,IAAW;AAC1C,eAAO,KAAK,KAAK,IAAI,YAAY,YAAU,yBAAuB,IAAI;UAC9D,SAAU;YACN,eAAgB,UAAU,KAAK,WAAW;;UAE9C,cAAe;SAClB;MACT;MACA,eAAe,MAAiB,UAAgC,UAAe;AAC3E,gBAAQ,IAAI,aAAa,QAAQ;AACjC,gBAAQ,IAAI,YAAY,oBAAoB,IAAI;AAChD,YAAI,WAAW,IAAI,SAAQ;AAC3B,iBAAS,OAAO,eAAc,SAAS,eAAa,EAAE;AACtD,iBAAS,OAAO,UAAU,SAAS,OAAO,SAAQ,CAAE;AACpD,iBAAS,OAAO,cAAa,SAAS,cAAY,QAAQ;AAC1D,iBAAS,OAAO,YAAW,QAAQ;AACnC,eAAO,KAAK,KAAK,KAAK,YAAY,YAAU,qBAAoB,UAAU;UAClE,SAAU;YACN,eAAgB,UAAU,KAAK,WAAW;;SAEjD;MACT;MACA,gBAAgB,MAAkB,IAAW;AACzC,eAAO,KAAK,KAAK,IAAI,YAAY,YAAU,gBAAc,IAAI;UACrD,SAAU;YACN,eAAgB,UAAU,KAAK,WAAW;;SAEjD;MACT;MACA,sBAAsB,MAAkB,IAAa,UAA+B;AAChF,eAAO,KAAK,KAAK,IAAI,YAAY,YAAU,gBAAc,IAAG,UAAU;UAC9D,SAAU;YACN,eAAgB,UAAU,KAAK,WAAW;;SAEjD;MACT;;AApES,sBAAe,WAAA;MAD3B,WAAU;OACE,eAAe;;;;;ACR5B,IAAa;AAAb;;;AAAM,IAAO,uBAAP,MAA2B;MAElB;MACA;MACA;MACA;MAJX,YACW,cAA8B,MAC9B,SAAiB,GACjB,aAA6B,UAC7B,oBAA+B,OAAK;AAHpC,aAAA,cAAA;AACA,aAAA,SAAA;AACA,aAAA,aAAA;AACA,aAAA,oBAAA;MACT;;;;",
  "names": ["DocumentService"]
}
