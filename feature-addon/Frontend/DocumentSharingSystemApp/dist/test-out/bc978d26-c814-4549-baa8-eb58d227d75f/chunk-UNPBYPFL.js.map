{
  "version": 3,
  "sources": ["src/app/services/documentrestore.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { UserModel } from '../models/user.model';\nimport { DocumentRequestModal } from '../document-request-modal/document-request-modal';\nimport { DocumentRestoreRequestModel } from '../models/document.request.model';\n\nexport interface RestoreRequestDto {\n  documentId: string;\n  userId: string;\n  reason: string;\n}\nexport interface rquestdocumentsresponse{\n   data: DocumentRestoreRequestModel[];\n  totalRecords: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentRestoreService {\n\n  private baseUrl = `${environment.serverUrl}/Documentrestore`;\n\n  constructor(private http: HttpClient) {}\n\n  requestRestore(user:UserModel,request: RestoreRequestDto): Observable<any> {\n    return this.http.post(`${this.baseUrl}/request`, request,{ headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                }});\n  }\n\n  getAllRequests(user:UserModel): Observable<any[]> {\n    return this.http.get<any[]>(`${this.baseUrl}/getall`,{ headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                }});\n  }\n\n  approveRequest(user:UserModel,requestId: string, adminId: string): Observable<any> {\n    const params = new HttpParams().set('adminId', adminId);\n    return this.http.post(`${this.baseUrl}/approve/${requestId}`, null, { headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                } ,params });\n  }\n\n  rejectRequest(user:UserModel,requestId: string, adminId: string): Observable<any> {\n    const params = new HttpParams().set('adminId', adminId);\n    return this.http.post(`${this.baseUrl}/reject/${requestId}`, null, { headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                },params });\n  }\n  getRequestByDocumentId(documentId: string,user:UserModel): Observable<DocumentRestoreRequestModel> {\n    return this.http.get<DocumentRestoreRequestModel>(`${this.baseUrl}/bydocument/${documentId}`,{ headers : {\n                    Authorization : `Bearer ${user.accessToken}`\n                }}); }\n\ngetFilteredRequests(type: string, page: number = 1, pageSize: number = 6, user: UserModel): Observable<rquestdocumentsresponse> {\n  let params = new HttpParams()\n    .set('page', page.toString())\n    .set('pageSize', pageSize.toString());\n\n  if (type) {\n    params = params.set('type', type);\n  }\n\n  return this.http.get<rquestdocumentsresponse>(\n    `${this.baseUrl}/filtered`,\n    {\n      params,\n      headers: {\n        Authorization: `Bearer ${user.accessToken}`\n      }\n    }\n  );\n}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;IAqBa;;;;;AArBb;AACA;AAEA;AAkBO,IAAM,yBAAN,MAAMA,wBAAsB;MAIb;MAFZ,UAAU,GAAG,YAAY,SAAS;MAE1C,YAAoB,MAAgB;AAAhB,aAAA,OAAA;MAAmB;MAEvC,eAAe,MAAe,SAA0B;AACtD,eAAO,KAAK,KAAK,KAAK,GAAG,KAAK,OAAO,YAAY,SAAQ,EAAE,SAAU;UACrD,eAAgB,UAAU,KAAK,WAAW;UAC7C,CAAC;MAChB;MAEA,eAAe,MAAc;AAC3B,eAAO,KAAK,KAAK,IAAW,GAAG,KAAK,OAAO,WAAU,EAAE,SAAU;UACjD,eAAgB,UAAU,KAAK,WAAW;UAC7C,CAAC;MAChB;MAEA,eAAe,MAAe,WAAmB,SAAe;AAC9D,cAAM,SAAS,IAAI,WAAU,EAAG,IAAI,WAAW,OAAO;AACtD,eAAO,KAAK,KAAK,KAAK,GAAG,KAAK,OAAO,YAAY,SAAS,IAAI,MAAM,EAAE,SAAU;UAChE,eAAgB,UAAU,KAAK,WAAW;WAC3C,OAAM,CAAE;MACzB;MAEA,cAAc,MAAe,WAAmB,SAAe;AAC7D,cAAM,SAAS,IAAI,WAAU,EAAG,IAAI,WAAW,OAAO;AACtD,eAAO,KAAK,KAAK,KAAK,GAAG,KAAK,OAAO,WAAW,SAAS,IAAI,MAAM,EAAE,SAAU;UAC/D,eAAgB,UAAU,KAAK,WAAW;WAC5C,OAAM,CAAE;MACxB;MACA,uBAAuB,YAAmB,MAAc;AACtD,eAAO,KAAK,KAAK,IAAiC,GAAG,KAAK,OAAO,eAAe,UAAU,IAAG,EAAE,SAAU;UACzF,eAAgB,UAAU,KAAK,WAAW;UAC7C,CAAC;MAAG;MAErB,oBAAoB,MAAc,OAAe,GAAG,WAAmB,GAAG,MAAe;AACvF,YAAI,SAAS,IAAI,WAAU,EACxB,IAAI,QAAQ,KAAK,SAAQ,CAAE,EAC3B,IAAI,YAAY,SAAS,SAAQ,CAAE;AAEtC,YAAI,MAAM;AACR,mBAAS,OAAO,IAAI,QAAQ,IAAI;QAClC;AAEA,eAAO,KAAK,KAAK,IACf,GAAG,KAAK,OAAO,aACf;UACE;UACA,SAAS;YACP,eAAe,UAAU,KAAK,WAAW;;SAE5C;MAEL;;;;;AAtDa,6BAAsB,WAAA;MAHlC,WAAW;QACV,YAAY;OACb;OACY,sBAAsB;;;",
  "names": ["DocumentRestoreService"]
}
