{
  "version": 3,
  "sources": ["src/app/services/user.service.ts"],
  "sourcesContent": ["import { HttpClient } from \"@angular/common/http\";\nimport { inject, Injectable } from \"@angular/core\";\nimport { BehaviorSubject, catchError, finalize, map, Observable, of, switchMap } from \"rxjs\";\nimport { UserModel } from \"../models/user.model\";\nimport { UserLoginModel } from \"../models/user.login.model\";\nimport { environment } from \"../../environments/environment\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { Router } from \"@angular/router\";\nimport { UserUpdateModel } from \"../models/user.update.model\";\nimport { UserSearchModel } from \"../models/user.search.model\";\nimport { UserAddModel } from \"../models/user.add.model\";\nimport { Store } from \"@ngxs/store\";\nimport { RemoveCurrentUserAction, SetCurrentUserAction } from \"../current-user/current-user.actions\";\n\n@Injectable()\nexport class UserService {\n    private http = inject(HttpClient);\n    private router = inject(Router);\n    private store = inject(Store);\n    private userSubject : BehaviorSubject<UserModel| null> = new BehaviorSubject<UserModel|null>(null);\n    public user$ : Observable<UserModel | null> = this.userSubject.asObservable();\n\n\n    private snackBar : MatSnackBar = new MatSnackBar();\n\n    accessToken : string = \"\";\n    refreshToken : string = \"\";\n    user : UserModel | null = null;\n\n    loginSubject : BehaviorSubject<{success : boolean, error : string | null}> = new BehaviorSubject<{success : boolean, error : string | null}>({success : false, error : null});\n\n    login(creds : UserLoginModel) {\n        return this.http.post(environment.serverUrl+'/auth/login',creds).pipe(\n                map((res: any) => {\n                    this.accessToken = res.accessToken;\n                    this.refreshToken = res.refreshToken;\n                    // localStorage.setItem('accessToken',res.accessToken);\n                    localStorage.setItem('refreshToken',res.refreshToken);\n                    this.getCurrentUserDetails();\n                    this.snackBar.open(\"Log In Success!\",undefined,{duration:2000})\n                    this.router.navigateByUrl(\"/documents\"); \n                    return of({success : true, error : \"\"})\n                }),\n                catchError((err : any) =>{\n                    console.log(err);\n                    return of({success : false, error : err.error.errors.message})\n\n                })\n            )\n    }\n    // login(creds : UserLoginModel)\n    logout(){\n        this.http.post(environment.serverUrl+'/auth/logout',{},{\n            headers: {\n                Authorization: `Bearer ${this.accessToken}`\n            },\n            responseType: 'text'\n        }).pipe(\n            catchError((err) => {\n                console.error(err);\n                return (of(null));\n            }),\n            finalize(()=> {\n                localStorage.removeItem('accessToken');\n                localStorage.removeItem('refreshToken');\n                this.store.dispatch(new RemoveCurrentUserAction());\n                this.accessToken = \"\";\n                this.refreshToken = \"\";\n                this.user = null;\n                this.userSubject.next(this.user);\n                this.router.navigateByUrl(\"/\");\n            })\n        )\n        .subscribe();\n    }\n    getCurrentUserDetails() : Observable<UserModel | null>{\n        let rt = localStorage.getItem('refreshToken');\n        if(rt == null){\n            console.log('refreshToken not found');\n            this.router.navigateByUrl(\"/\"); \n            return of(null);\n        }\n        return this.http.post(environment.serverUrl+`/auth/refresh?token=${rt}`,{})\n        .pipe(\n            switchMap((data: any) => {\n                this.accessToken = data.accessToken;\n                \n                return this.http.get(`${environment.serverUrl}/auth/me`, {\n                    headers: {\n                        Authorization: `Bearer ${this.accessToken}`\n                    }\n                });\n            }),\n            map((data:any) => {\n                this.user = data.data;\n                this.user!.accessToken =this.accessToken;\n                this.user!.refreshToken =this.refreshToken;\n                this.store.dispatch(new SetCurrentUserAction(this.user));\n                this.userSubject.next(this.user);\n                return this.user;\n                \n                }),\n                catchError((err: any) => {\n                        console.error('Error during login:', err);\n                        this.snackBar.open(\"Session expired. Please login again.\", undefined, { duration: 3000 });\n                        // this.router.navigateByUrl('/');\n                        return of(null);\n                })\n            )\n        }\n    \n    getAllUsers(){\n        return this.http.get(environment.serverUrl+'/users/all',{\n                    headers :{\n                        Authorization: `Bearer ${this.accessToken}`\n                    }\n        })\n    }\n\n    getUserById(id : string){\n        return this.http.get(environment.serverUrl+'/users/'+id,{\n                    headers :{\n                        Authorization: `Bearer ${this.accessToken}`\n                    }\n        })\n    }\n    updateUserById(id : string, updatedUser : UserUpdateModel){\n        return this.http.put(environment.serverUrl+'/users/'+id,updatedUser,{\n            headers :{\n                Authorization: `Bearer ${this.accessToken}`\n            }\n        })\n    }\n    changeUserRoleById(id : string, role : string){\n        return this.http.post(environment.serverUrl+`/users/revoke/${id}?role=${role}`,null,{\n            headers :{\n                Authorization: `Bearer ${this.accessToken}`\n            }\n        })\n    }\n    deleteUserById(id : string){\n        return this.http.delete(environment.serverUrl+'/users/'+id,{\n            headers :{\n                Authorization: `Bearer ${this.accessToken}`\n            }\n        })\n    }\n    revokeUserById(id : string){\n        return this.http.post(environment.serverUrl+`/users/revoke/${id}`,null,{\n            headers :{\n                Authorization: `Bearer ${this.accessToken}`\n            }\n        })\n    }\n    getByFilter(userSearch : UserSearchModel){\n        return this.http.post(environment.serverUrl+'/users/filter',userSearch,{\n            headers :{\n                Authorization: `Bearer ${this.accessToken}`\n            }\n        })\n    }\n    \n    addUser(newUser : UserAddModel){\n        return this.http.post(environment.serverUrl+'/users',newUser,{\n            headers :{\n                Authorization: `Bearer ${this.accessToken}`\n            }\n        })\n    }\n}"],
  "mappings": "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",
  "names": ["UserService"]
}
