{
  "version": 3,
  "sources": ["src/app/services/notification.service.spec.ts"],
  "sourcesContent": ["import { HttpClient } from \"@angular/common/http\";\nimport { TestBed } from \"@angular/core/testing\";\nimport { UserModel } from \"../models/user.model\";\nimport { of } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport { TeamService } from \"./team.service\";\nimport { TeamModel } from \"../models/team.model\";\nimport { NotificationService } from \"./notification.service\";\nimport { Store } from \"@ngxs/store\";\nimport { AlertService } from \"./inactive.alert\";\nimport * as signalR from \"@microsoft/signalr\";\nimport { HttpClientTestingModule,HttpTestingController } from \"@angular/common/http/testing\";\n\ndescribe(\"NotificationService\",() =>{\n    let service : NotificationService;\n    let storeSpy : jasmine.SpyObj<Store>;\n    let mockConnection : signalR.HubConnection;\n\n    let user = new UserModel(\"1\");\n    user.accessToken = \"access-token\";\n\n\n    beforeEach(() => {\n        storeSpy = jasmine.createSpyObj(\"Store\",[\"select\"]);\n\n        storeSpy.select.and.returnValue(of(user));\n        spyOn(NotificationService.prototype, 'sendMessage').and.callFake(() => {});\n        // spyOn(NotificationService.prototype, 'sendTeamMessage').and.callFake(() => {});\n\n        mockConnection = {\n            start: jasmine.createSpy().and.returnValue(Promise.resolve()),\n            invoke: jasmine.createSpy().and.returnValue(Promise.resolve()),\n            on: jasmine.createSpy()\n        } as unknown as signalR.HubConnection;\n        \n        \n        spyOn(signalR.HubConnectionBuilder.prototype, 'withUrl').and.returnValue(signalR.HubConnectionBuilder.prototype);\n        spyOn(signalR.HubConnectionBuilder.prototype, 'withAutomaticReconnect').and.returnValue(signalR.HubConnectionBuilder.prototype);\n        spyOn(signalR.HubConnectionBuilder.prototype, 'build').and.returnValue(mockConnection);\n        \n        \n        TestBed.configureTestingModule({\n            imports :[HttpClientTestingModule],\n            providers :[\n                NotificationService,\n                {provide : Store, useValue : storeSpy},\n\n            ]\n        });\n        \n        service = TestBed.inject(NotificationService);\n        service.hubConnection = mockConnection;\n        \n    })\n\n    it(\"should be created\", () => {\n        expect(service).toBeTruthy();\n    })\n    it(\"should start connection\", () => {\n\n        service.startConnection();\n\n        expect(mockConnection.start).toHaveBeenCalled();\n        expect(mockConnection.on).toHaveBeenCalledTimes(2);\n    })\n    it(\"should send message\", () => {\n        (service.sendMessage as jasmine.Spy).and.callThrough();\n        service.sendMessage(\"user\",\"message\");\n        expect(mockConnection.invoke).toHaveBeenCalledOnceWith(\"SendMessage\",\"user\",\"message\");\n    })\n    it(\"should send team message\", () => {\n        // (service.sendTeamMessage as jasmine.Spy).and.callThrough();\n        service.sendTeamMessage(\"user\",\"message\",1);\n        expect(mockConnection.invoke).toHaveBeenCalledOnceWith(\"SendTeamMessage\",\"user\",\"message\",1);\n    })\n    \n   \n})"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAIA;AACA;AAEAA;AAGA,SAAS,uBAAsB,MAAK;AAChC,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,MAAI,OAAO,IAAI,UAAU,GAAG;AAC5B,OAAK,cAAc;AAGnB,aAAW,MAAK;AACZ,eAAW,QAAQ,aAAa,SAAQ,CAAC,QAAQ,CAAC;AAElD,aAAS,OAAO,IAAI,YAAY,GAAG,IAAI,CAAC;AACxC,UAAM,oBAAoB,WAAW,aAAa,EAAE,IAAI,SAAS,MAAK;IAAE,CAAC;AAGzE,qBAAiB;MACb,OAAO,QAAQ,UAAS,EAAG,IAAI,YAAY,QAAQ,QAAO,CAAE;MAC5D,QAAQ,QAAQ,UAAS,EAAG,IAAI,YAAY,QAAQ,QAAO,CAAE;MAC7D,IAAI,QAAQ,UAAS;;AAIzB,UAAc,qBAAqB,WAAW,SAAS,EAAE,IAAI,YAAoB,qBAAqB,SAAS;AAC/G,UAAc,qBAAqB,WAAW,wBAAwB,EAAE,IAAI,YAAoB,qBAAqB,SAAS;AAC9H,UAAc,qBAAqB,WAAW,OAAO,EAAE,IAAI,YAAY,cAAc;AAGrF,YAAQ,uBAAuB;MAC3B,SAAS,CAAC,uBAAuB;MACjC,WAAW;QACP;QACA,EAAC,SAAU,OAAO,UAAW,SAAQ;;KAG5C;AAED,cAAU,QAAQ,OAAO,mBAAmB;AAC5C,YAAQ,gBAAgB;EAE5B,CAAC;AAED,KAAG,qBAAqB,MAAK;AACzB,WAAO,OAAO,EAAE,WAAU;EAC9B,CAAC;AACD,KAAG,2BAA2B,MAAK;AAE/B,YAAQ,gBAAe;AAEvB,WAAO,eAAe,KAAK,EAAE,iBAAgB;AAC7C,WAAO,eAAe,EAAE,EAAE,sBAAsB,CAAC;EACrD,CAAC;AACD,KAAG,uBAAuB,MAAK;AAC1B,YAAQ,YAA4B,IAAI,YAAW;AACpD,YAAQ,YAAY,QAAO,SAAS;AACpC,WAAO,eAAe,MAAM,EAAE,yBAAyB,eAAc,QAAO,SAAS;EACzF,CAAC;AACD,KAAG,4BAA4B,MAAK;AAEhC,YAAQ,gBAAgB,QAAO,WAAU,CAAC;AAC1C,WAAO,eAAe,MAAM,EAAE,yBAAyB,mBAAkB,QAAO,WAAU,CAAC;EAC/F,CAAC;AAGL,CAAC;",
  "names": ["init_esm"]
}
