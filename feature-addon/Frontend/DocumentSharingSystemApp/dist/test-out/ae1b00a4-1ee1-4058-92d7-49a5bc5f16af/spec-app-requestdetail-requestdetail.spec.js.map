{
  "version": 3,
  "sources": ["src/app/requestdetail/requestdetail.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { Requestdetail } from './requestdetail';\nimport { of } from 'rxjs';\nimport { DocumentRestoreService } from '../services/documentrestore.service';\nimport { UserService } from '../services/user.service';\nimport { Store } from '@ngxs/store';\nimport { UserModel } from '../models/user.model';\nimport { DocumentRequestModal } from '../document-request-modal/document-request-modal';\nimport { DocumentRestoreRequestModel } from '../models/document.request.model';\n\ndescribe('Requestdetail', () => {\n  let component: Requestdetail;\n  let fixture: ComponentFixture<Requestdetail>;\n\n  let mockDocumentRestoreService: jasmine.SpyObj<DocumentRestoreService>;\n  let mockUserService: jasmine.SpyObj<UserService>;\n  let mockStore: jasmine.SpyObj<Store>;\n\n  beforeEach(async () => {\n    // Create spies\n    mockDocumentRestoreService = jasmine.createSpyObj('DocumentRestoreService', ['getRequestByDocumentId']);\n    mockUserService = jasmine.createSpyObj('UserService', ['getCurrentUserDetails']);\n    mockStore = jasmine.createSpyObj('Store', ['select']);\n\n    // Return default observables\n    mockStore.select.and.returnValue(of(new UserModel(\"1\"))); \n    mockUserService.getCurrentUserDetails.and.returnValue(of(new UserModel(\"1\")));\n    mockDocumentRestoreService.getRequestByDocumentId.and.returnValue(of(new DocumentRestoreRequestModel()));\n\n    await TestBed.configureTestingModule({\n      imports: [Requestdetail],\n      providers: [\n        { provide: DocumentRestoreService, useValue: mockDocumentRestoreService },\n        { provide: UserService, useValue: mockUserService },\n        { provide: Store, useValue: mockStore }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(Requestdetail);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,aAAS,iBAAiB,MAAK;AAC7B,UAAI;AACJ,UAAI;AAEJ,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AAEpB,qCAA6B,QAAQ,aAAa,0BAA0B,CAAC,wBAAwB,CAAC;AACtG,0BAAkB,QAAQ,aAAa,eAAe,CAAC,uBAAuB,CAAC;AAC/E,oBAAY,QAAQ,aAAa,SAAS,CAAC,QAAQ,CAAC;AAGpD,kBAAU,OAAO,IAAI,YAAY,GAAG,IAAI,UAAU,GAAG,CAAC,CAAC;AACvD,wBAAgB,sBAAsB,IAAI,YAAY,GAAG,IAAI,UAAU,GAAG,CAAC,CAAC;AAC5E,mCAA2B,uBAAuB,IAAI,YAAY,GAAG,IAAI,4BAA2B,CAAE,CAAC;AAEvG,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,aAAa;UACvB,WAAW;YACT,EAAE,SAAS,wBAAwB,UAAU,2BAA0B;YACvE,EAAE,SAAS,aAAa,UAAU,gBAAe;YACjD,EAAE,SAAS,OAAO,UAAU,UAAS;;SAExC,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,aAAa;AAC/C,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;IACH,CAAC;;;",
  "names": []
}
