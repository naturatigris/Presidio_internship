{
  "version": 3,
  "sources": ["src/app/services/team.service.spec.ts"],
  "sourcesContent": ["import { HttpClient } from \"@angular/common/http\";\nimport { TestBed } from \"@angular/core/testing\";\nimport { UserModel } from \"../models/user.model\";\nimport { of } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport { TeamService } from \"./team.service\";\nimport { TeamModel } from \"../models/team.model\";\n\ndescribe(\"TeamService\",() =>{\n    let service : TeamService;\n    let httpSpy : jasmine.SpyObj<HttpClient>;\n\n    let user = new UserModel(\"1\");\n    user.accessToken = \"access-token\";\n\n    let teams  = [new TeamModel(1), new TeamModel(2)];\n\n    beforeEach(() => {\n        httpSpy = jasmine.createSpyObj(\"HttpClient\",[\"get\",\"post\",\"put\",\"delete\"]);\n        TestBed.configureTestingModule({\n            imports :[],\n            providers :[\n                TeamService,\n                {provide : HttpClient, useValue : httpSpy}\n            ]\n        });\n\n        service = TestBed.inject(TeamService);\n    })\n\n    it(\"should be created\", () => {\n        expect(service).toBeTruthy();\n    })\n    it(\"should get all teams\", () => {\n        let mockRes = {data: {$values : teams}}\n        httpSpy.get.and.returnValue(of(mockRes));\n        service.getAllTeams(user)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.get).toHaveBeenCalledOnceWith(environment.serverUrl+'/teams',{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n    it(\"should get teams by filter\", () => {\n        let mockRes = {data: {$values : teams}}\n        httpSpy.get.and.returnValue(of(mockRes));\n\n        service.getByFilter(\"search\",user)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.get).toHaveBeenCalledOnceWith(environment.serverUrl+'/teams/filter?searchQuery='+\"search\",{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n    it(\"should delete team\", () => {\n        let mockRes = {data: teams[0]}\n        httpSpy.delete.and.returnValue(of(mockRes));\n\n        service.deleteTeam(1,user)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.delete).toHaveBeenCalledOnceWith(environment.serverUrl+'/teams/'+\"1\",{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n    it(\"should add team\", () => {\n        let mockRes = {data: teams[0]}\n        httpSpy.post.and.returnValue(of(mockRes));\n\n        service.addTeam(\"newTeam\",user)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.post).toHaveBeenCalledOnceWith(environment.serverUrl+'/teams?name='+\"newTeam\",null,{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n    it(\"should restore team\", () => {\n        let mockRes = {data: teams[0]}\n        httpSpy.post.and.returnValue(of(mockRes));\n\n        service.restoreTeam(1,user)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.post).toHaveBeenCalledOnceWith(environment.serverUrl+'/teams/restore/'+\"1\",null,{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n\n    it(\"should update team\", () => {\n        let mockRes = {data: teams[0]}\n        httpSpy.put.and.returnValue(of(mockRes));\n\n        service.updateTeam(1,\"name\",user)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.put).toHaveBeenCalledOnceWith(environment.serverUrl+'/teams/'+\"1\"+\"?name=\"+\"name\",null,{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n})"],
  "mappings": "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",
  "names": []
}
