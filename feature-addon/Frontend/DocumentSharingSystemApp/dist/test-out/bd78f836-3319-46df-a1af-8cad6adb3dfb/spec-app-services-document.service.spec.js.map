{
  "version": 3,
  "sources": ["src/app/services/document.service.spec.ts"],
  "sourcesContent": ["import { HttpClient } from \"@angular/common/http\";\nimport { DocumentService } from \"./document.service\"\nimport { TestBed } from \"@angular/core/testing\";\nimport { UserModel } from \"../models/user.model\";\nimport { DocumentModel } from \"../models/document.model\";\nimport { of } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport { DocumentSearchModel } from \"../models/document.search.model\";\nimport { DocumentDetailsModel } from \"../models/document.details.model\";\n\ndescribe(\"DocumentService\",() =>{\n    let service : DocumentService;\n    let httpSpy : jasmine.SpyObj<HttpClient>;\n\n    let user = new UserModel(\"1\");\n    user.accessToken = \"access-token\";\n\n    let documents  = [new DocumentModel(\"1\"), new DocumentModel(\"2\")];\n\n    beforeEach(() => {\n        httpSpy = jasmine.createSpyObj(\"HttpClient\",[\"get\",\"post\",\"put\",\"delete\"]);\n        TestBed.configureTestingModule({\n            imports :[],\n            providers :[\n                DocumentService,\n                {provide : HttpClient, useValue : httpSpy}\n            ]\n        });\n\n        service = TestBed.inject(DocumentService);\n    })\n\n    it(\"should be created\", () => {\n        expect(service).toBeTruthy();\n    })\n    it(\"should get all documents\", () => {\n        let mockRes = {data: {$values : documents}}\n        httpSpy.get.and.returnValue(of(mockRes));\n        service.getAll(user)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.get).toHaveBeenCalledOnceWith(environment.serverUrl+'/documents',{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n    it(\"should get documents by filter\", () => {\n        let mockRes = {data: {$values : documents}}\n        httpSpy.post.and.returnValue(of(mockRes));\n\n        let ds = new DocumentSearchModel();\n        service.getByFilter(user, ds)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.post).toHaveBeenCalledOnceWith(environment.serverUrl+'/documents/filter',ds,{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n    it(\"should delete document\", () => {\n        let mockRes = {data: {$values : documents}}\n        httpSpy.delete.and.returnValue(of(mockRes));\n\n        service.deleteDocument(user,\"1\")?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.delete).toHaveBeenCalledOnceWith(environment.serverUrl+'/documents/'+\"1\",{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n    it(\"should download document\", () => {\n        const mockBlob = new Blob(['Test content'], { type: 'application/pdf' });\n        httpSpy.get.and.returnValue(of(mockBlob));\n        \n        service.downloadDocument(user,\"1\")?.subscribe((res)=>{\n            expect(res).toEqual(mockBlob);\n            expect(httpSpy.get).toHaveBeenCalledOnceWith(environment.serverUrl+'/documents/download/'+\"1\",\n                {\n                    headers : {\n                        Authorization : `Bearer ${user.accessToken}`\n                    },\n                    responseType : 'blob' as any\n                })\n            })\n        })\n    it(\"should upload document\", () => {\n        let mockRes = {data: {$values : documents}}\n        httpSpy.post.and.returnValue(of(mockRes));\n\n        let docDetails = new DocumentDetailsModel();\n        let file = new File(['test'], 'test.txt', { type: 'text/plain' });\n    \n        let formData = new FormData();\n        formData.append('description',\"\");\n        formData.append('teamId', \"\");\n        formData.append('visibility',\"Public\");\n        formData.append('formFile',file);\n\n        service.uploadDocument(user,docDetails,file)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.post).toHaveBeenCalledOnceWith(environment.serverUrl+'/documents/upload',formData,{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n\n    it(\"should get documents by id\", () => {\n        let mockRes = {data: documents[0]};\n        httpSpy.get.and.returnValue(of(mockRes));\n\n        service.getDocumentById(user, \"1\")?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.get).toHaveBeenCalledOnceWith(environment.serverUrl+'/documents/'+\"1\",{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n    it(\"should update document details\", () => {\n        let mockRes = {data: {$values : documents}}\n        httpSpy.put.and.returnValue(of(mockRes));\n\n        let docDetails = new DocumentDetailsModel();\n\n        service.updateDocumentDetails(user,\"1\",docDetails)?.subscribe((res)=>{\n            expect(res).toBe(mockRes);\n            expect(httpSpy.put).toHaveBeenCalledOnceWith(environment.serverUrl+'/documents/'+\"1\",docDetails,{\n                            headers : {\n                                Authorization : `Bearer ${user.accessToken}`\n                            }\n                        })\n        })\n    })\n})"],
  "mappings": "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",
  "names": []
}
