{
  "version": 3,
  "sources": ["angular:jit:template:src/app/login/login.html", "angular:jit:style:src/app/login/login.css", "src/app/login/login.ts", "src/app/login/login.spec.ts"],
  "sourcesContent": ["<div class=\"main\">\n\n    <div class=\"welcome\">\n        <h2>Welcome to</h2>\n        <h1>Document Sharing System</h1>\n    </div>\n    <div class=\"login\">\n\n        <h1>Login</h1>\n        \n        <mat-form-field class=\"input\">\n            <mat-label>Email</mat-label>\n            <input matInput type=\"text\" [(ngModel)]=\"userCredentials.email\">\n        </mat-form-field>\n        \n        <mat-form-field class=\"input\">\n            <mat-label>Password</mat-label>\n            <input \n                matInput \n                [type]=\"hidePassword()? 'password' : 'text'\" \n                [(ngModel)]=\"userCredentials.password\"\n                [formControl]=\"fc\"\n            >\n            <button\n                matIconButton\n                matSuffix\n                (click)=\"passwordView()\"\n                [attr.aria-pressed]=\"hidePassword()\"\n            >\n                <mat-icon>{{hidePassword() ? 'visibility_off' : 'visibility'}}</mat-icon>\n            </button>\n\n            @if (fc.hasError('server')) {\n                <mat-error>{{fc.getError('server')}}</mat-error>\n            }\n        </mat-form-field>\n        \n        <button matFab extended (click)=\"handleLogin()\">\n            <mat-icon>login</mat-icon>\n            Login\n        </button>\n    </div>\n</div>", "/* src/app/login/login.css */\n.main {\n  width: 100%;\n  height: 98vh;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-evenly;\n}\n.welcome {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.login {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  margin: 20px;\n  border: 2px solid #3c67d2;\n  border-radius: 8px;\n  gap: 30px;\n}\nh1 {\n  color: #3c67d2;\n}\n.input {\n  width: 300px;\n}\n/*# sourceMappingURL=login.css.map */\n", "import { Component, signal } from '@angular/core';\nimport { UserLoginModel } from '../models/user.login.model';\nimport { UserService } from '../services/user.service';\nimport { FormControl, FormsModule, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { JsonPipe } from '@angular/common';\n\n@Component({\n  selector: 'app-login',\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule\n  ],\n  templateUrl: './login.html',\n  styleUrl: './login.css',\n  providers: [\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'outline'}}\n  ]\n})\nexport class Login {\n  userCredentials : UserLoginModel = new UserLoginModel();\n  hidePassword = signal(true);\n\n  fc = new FormControl(null);\n\n  constructor(private userService:UserService ){}\n  handleLogin(){\n    this.userService.login(this.userCredentials).subscribe({\n      next : (data : any) =>{\n        // console.log(data);\n        if(!data.success){\n          this.fc.setErrors({server: data.error});\n        }\n      }\n    })\n  }\n  passwordView(){\n    this.hidePassword.set(!this.hidePassword());\n  }\n\n}\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { Login } from './login';\nimport { UserService } from '../services/user.service';\nimport { of } from 'rxjs';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\ndescribe('Login', () => {\n  let component: Login;\n  let fixture: ComponentFixture<Login>;\n  let userServiceSpy : jasmine.SpyObj<UserService>;\n\n  beforeEach(async () => {\n    let spy = jasmine.createSpyObj(\"UserService\",[\"login\"])\n    await TestBed.configureTestingModule({\n      imports: [Login],\n      providers : [\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatButtonModule,\n        MatIconModule,\n        {provide: UserService, useValue : spy}\n      ]\n    })\n    .compileComponents();\n\n    userServiceSpy = TestBed.inject(UserService) as jasmine.SpyObj<UserService>;\n    userServiceSpy.login.and.returnValue(of({success:true, error:null}))\n    fixture = TestBed.createComponent(Login);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should display', () => {\n    expect(fixture.nativeElement.textContent).toContain(\"Welcome\");\n  });\n  it('should call login', () => {\n    component.handleLogin();\n    expect(userServiceSpy.login).toHaveBeenCalled();\n    expect(userServiceSpy.login).toHaveBeenCalledWith(component.userCredentials);\n  });\n  it('should get server login error', () => {\n    userServiceSpy.login.and.returnValue(of({success:false, error: \"Invalid Credentials\"}));\n    fixture.detectChanges();\n    component.handleLogin();\n    expect(userServiceSpy.login).toHaveBeenCalled();\n    expect(userServiceSpy.login).toHaveBeenCalledWith(component.userCredentials);\n    expect(component.fc.errors).toEqual({server: \"Invalid Credentials\"});\n  });\n  it('should display login error', () => {\n    userServiceSpy.login.and.returnValue(of({success:false, error: \"Invalid Credentials\"}));\n    component.fc.markAsTouched();\n    component.fc.markAsDirty();\n    component.handleLogin();\n    fixture.detectChanges();\n    expect(fixture.nativeElement.textContent).toContain(\"Invalid Credentials\");\n  });\n  it('should toggle password visibility', () => {\n    const initialView = component.hidePassword();\n    component.passwordView();\n    expect(component.hidePassword()).toBe(!initialView);\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,cAAA;AAAA;AAAA,IAAAD,iBAAA;AAAA;AAAA;;;IC0Ba;;;;;;;AA1Bb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBO,IAAM,QAAN,MAAME,OAAK;MAMI;MALpB,kBAAmC,IAAI,eAAc;MACrD,eAAe,OAAO,IAAI;MAE1B,KAAK,IAAI,YAAY,IAAI;MAEzB,YAAoB,aAAuB;AAAvB,aAAA,cAAA;MAA0B;MAC9C,cAAW;AACT,aAAK,YAAY,MAAM,KAAK,eAAe,EAAE,UAAU;UACrD,MAAO,CAAC,SAAc;AAEpB,gBAAG,CAAC,KAAK,SAAQ;AACf,mBAAK,GAAG,UAAU,EAAC,QAAQ,KAAK,MAAK,CAAC;YACxC;UACF;SACD;MACH;MACA,eAAY;AACV,aAAK,aAAa,IAAI,CAAC,KAAK,aAAY,CAAE;MAC5C;;;;;AAnBW,YAAK,WAAA;MAhBjB,UAAU;QACT,UAAU;QACV,SAAS;UACP;UACA;UACA;UACA;UACA;UACA;;QAEF,UAAA;QAEA,WAAW;UACT,EAAC,SAAS,gCAAgC,UAAU,EAAC,YAAY,UAAS,EAAC;;;OAE9E;OACY,KAAK;;;;;AC1BlB;;;AAEA,IAAAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,aAAS,SAAS,MAAK;AACrB,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,YAAI,MAAM,QAAQ,aAAa,eAAc,CAAC,OAAO,CAAC;AACtD,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,KAAK;UACf,WAAY;YACV;YACA;YACA;YACA;YACA;YACA;YACA,EAAC,SAAS,aAAa,UAAW,IAAG;;SAExC,EACA,kBAAiB;AAElB,yBAAiB,QAAQ,OAAO,WAAW;AAC3C,uBAAe,MAAM,IAAI,YAAY,GAAG,EAAC,SAAQ,MAAM,OAAM,KAAI,CAAC,CAAC;AACnE,kBAAU,QAAQ,gBAAgB,KAAK;AACvC,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AACD,SAAG,kBAAkB,MAAK;AACxB,eAAO,QAAQ,cAAc,WAAW,EAAE,UAAU,SAAS;MAC/D,CAAC;AACD,SAAG,qBAAqB,MAAK;AAC3B,kBAAU,YAAW;AACrB,eAAO,eAAe,KAAK,EAAE,iBAAgB;AAC7C,eAAO,eAAe,KAAK,EAAE,qBAAqB,UAAU,eAAe;MAC7E,CAAC;AACD,SAAG,iCAAiC,MAAK;AACvC,uBAAe,MAAM,IAAI,YAAY,GAAG,EAAC,SAAQ,OAAO,OAAO,sBAAqB,CAAC,CAAC;AACtF,gBAAQ,cAAa;AACrB,kBAAU,YAAW;AACrB,eAAO,eAAe,KAAK,EAAE,iBAAgB;AAC7C,eAAO,eAAe,KAAK,EAAE,qBAAqB,UAAU,eAAe;AAC3E,eAAO,UAAU,GAAG,MAAM,EAAE,QAAQ,EAAC,QAAQ,sBAAqB,CAAC;MACrE,CAAC;AACD,SAAG,8BAA8B,MAAK;AACpC,uBAAe,MAAM,IAAI,YAAY,GAAG,EAAC,SAAQ,OAAO,OAAO,sBAAqB,CAAC,CAAC;AACtF,kBAAU,GAAG,cAAa;AAC1B,kBAAU,GAAG,YAAW;AACxB,kBAAU,YAAW;AACrB,gBAAQ,cAAa;AACrB,eAAO,QAAQ,cAAc,WAAW,EAAE,UAAU,qBAAqB;MAC3E,CAAC;AACD,SAAG,qCAAqC,MAAK;AAC3C,cAAM,cAAc,UAAU,aAAY;AAC1C,kBAAU,aAAY;AACtB,eAAO,UAAU,aAAY,CAAE,EAAE,KAAK,CAAC,WAAW;MACpD,CAAC;IACH,CAAC;;;",
  "names": ["login_default", "init_login", "Login", "init_login"]
}
