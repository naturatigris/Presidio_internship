{
  "version": 3,
  "sources": ["src/app/services/documentrestore.service.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { DocumentRestoreService } from './documentrestore.service';\nimport { RestoreRequestDto } from './documentrestore.service';\nimport { rquestdocumentsresponse } from './documentrestore.service';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { environment } from '../../environments/environment';\nimport { UserModel } from '../models/user.model';\nimport { DocumentRestoreRequestModel } from '../models/document.request.model';\n\ndescribe('DocumentRestoreService', () => {\n  let service: DocumentRestoreService;\n  let httpMock: HttpTestingController;\n  const mockUser = new UserModel('123');\n  mockUser.accessToken = 'mock-token';\n\n  const baseUrl = `${environment.serverUrl}/Documentrestore`;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [DocumentRestoreService]\n    });\n\n    service = TestBed.inject(DocumentRestoreService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should request restore', () => {\n    const dto: RestoreRequestDto = { documentId: 'doc1', userId: 'user1', reason: 'Need it' };\n    service.requestRestore(mockUser, dto).subscribe();\n\n    const req = httpMock.expectOne(`${baseUrl}/request`);\n    expect(req.request.method).toBe('POST');\n    expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockUser.accessToken}`);\n    expect(req.request.body).toEqual(dto);\n  });\n\n  it('should get all requests', () => {\n    const mockData = [{ id: '1' }];\n    service.getAllRequests(mockUser).subscribe(data => {\n      expect(data).toEqual(mockData);\n    });\n\n    const req = httpMock.expectOne(`${baseUrl}/getall`);\n    expect(req.request.method).toBe('GET');\n    req.flush(mockData);\n  });\n\n  it('should approve a request', () => {\n    const requestId = 'req123';\n    const adminId = 'admin123';\n\n    service.approveRequest(mockUser, requestId, adminId).subscribe();\n\n    const req = httpMock.expectOne(`${baseUrl}/approve/${requestId}?adminId=${adminId}`);\n    expect(req.request.method).toBe('POST');\n  });\n\n  it('should reject a request', () => {\n    const requestId = 'req123';\n    const adminId = 'admin123';\n\n    service.rejectRequest(mockUser, requestId, adminId).subscribe();\n\n    const req = httpMock.expectOne(`${baseUrl}/reject/${requestId}?adminId=${adminId}`);\n    expect(req.request.method).toBe('POST');\n  });\n\n  it('should get request by document ID', () => {\n    const documentId = 'doc123';\n    const mockResponse: DocumentRestoreRequestModel = {\n      documentId: 'doc123',\n      id: '1',\n      reviewedByUserId: 'user1',\n      reason: 'backup',\n      requestedAt: new Date(),\n      status: 'Pending',\n      document: null,\n      requestedByUserId: '',\n      requestedByUser: null,\n      reviewedAt: null,\n      reviewedByUser: null,\n      originalFileName: '',\n      requestedByUserName: '',\n      reviewedByUserName: null,\n      isAdminRead: false,\n      IsUserRead: false\n    };\n\n    service.getRequestByDocumentId(documentId, mockUser).subscribe(res => {\n      expect(res).toEqual(mockResponse);\n    });\n\n    const req = httpMock.expectOne(`${baseUrl}/bydocument/${documentId}`);\n    expect(req.request.method).toBe('GET');\n    req.flush(mockResponse);\n  });\n\n  it('should get filtered requests', () => {\n    const type = 'Pending';\n    const page = 1;\n    const pageSize = 6;\n    const mockResponse: rquestdocumentsresponse = {\n      data: [],\n      totalRecords: 0\n    };\n\n    service.getFilteredRequests(type, page, pageSize, mockUser).subscribe(res => {\n      expect(res).toEqual(mockResponse);\n    });\n\n    const req = httpMock.expectOne(`${baseUrl}/filtered?page=${page}&pageSize=${pageSize}&type=${type}`);\n    expect(req.request.method).toBe('GET');\n    req.flush(mockResponse);\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
