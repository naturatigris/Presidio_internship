{
  "version": 3,
  "sources": ["angular:jit:template:src/app/document-request-user/document-request-user.html", "angular:jit:style:src/app/document-request-user/document-request-user.css", "src/app/document-request-user/document-request-user.ts", "src/app/document-request-user/document-request-user.spec.ts"],
  "sourcesContent": ["<app-navbar></app-navbar>\n<div class=\"main\">\n  <div class=\"header spacer\">\n    <h1 style=\"margin:0;\">Restore Requests</h1>\n  </div>\n\n<div class=\"restore-container\">\n  <mat-card *ngFor=\"let request of requests\" class=\"restore-card\">\n    <mat-card-header>\n      <mat-card-title>{{ request?.originalFileName || 'N/A' }}</mat-card-title>\n      <mat-card-subtitle>{{ request.requestedAt | date:'medium' }}</mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      \n\n      <div class=\"card-section\">\n        <strong>Reason:</strong> {{ request.reason }}\n      </div>\n\n      <div class=\"card-section\">\n        <strong>Status:</strong>\n        <span [ngClass]=\"getStatusClass(request.status)\">\n          {{ request.status }}\n        </span>\n      </div>\n\n      <div class=\"card-section\" *ngIf=\"request.reviewedAt\">\n        <strong>Reviewed At:</strong> {{ request.reviewedAt | date:'medium' }}\n      </div>\n\n      <div class=\"card-section\" *ngIf=\"request.reviewedByUserName\">\n        <strong>Reviewed By:</strong> {{ request.reviewedByUserName }}\n      </div>\n    </mat-card-content>\n\n  \n  </mat-card>\n</div>\n", "/* src/app/document-request-user/document-request-user.css */\n.restore-container {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px;\n}\n.restore-card {\n  padding: 10px;\n}\n.card-section {\n  margin-bottom: 10px;\n}\n.status-approved {\n  color: green;\n  font-weight: 600;\n}\n.status-rejected {\n  color: red;\n  font-weight: 600;\n}\n.status-pending {\n  color: orange;\n  font-weight: 600;\n}\n/*# sourceMappingURL=document-request-user.css.map */\n", "import { Component,OnInit} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Navbar } from '../navbar/navbar';\nimport { UserService } from '../services/user.service';\nimport { Store } from '@ngxs/store';\nimport { CurrentUserState } from '../current-user/current-user.state';\nimport { UserModel } from '../models/user.model';\nimport { DocumentRestoreService } from '../services/documentrestore.service';\nimport { DocumentRequestModal } from '../document-request-modal/document-request-modal';\nimport { MatCardModule } from '@angular/material/card';\nimport { DocumentRestoreRequestModel } from '../models/document.request.model';\n\n\n@Component({\n  selector: 'app-document-request-user',\n  imports: [Navbar,CommonModule,MatCardModule],\n  templateUrl: './document-request-user.html',\n  styleUrl: './document-request-user.css'\n})\nexport class DocumentRequestUser implements OnInit{\n  currentUser:UserModel|null=null;\n  requests:DocumentRestoreRequestModel[]=[];\n  constructor(private userService:UserService,private store:Store,private documentRestoreService:DocumentRestoreService){}\n  ngOnInit(): void {\n    this.store.select(CurrentUserState.getUser).subscribe(user => {\n          this.currentUser = user;\n          if (!this.currentUser) {\n            this.userService.getCurrentUserDetails().subscribe({\n              next: data => {\n                this.currentUser = data;\n                if (this.currentUser) {\n                  this.loadrequest();\n                }\n              }\n            });\n          } else {\n            this.loadrequest();\n          }\n        });\n    \n  }\n  loadrequest(){\n    this.documentRestoreService.getRequestByUserId(this.currentUser!).subscribe({\n      next:(data:any)=>{\n      this.requests = data?.$values ?? [];\n      console.log(this.requests);\n\n      },error(err) {\n        console.log(\"error fetching the requests\",err);\n      },\n    })\n\n  }\n  getStatusClass(status: string): string {\n    switch (status.toLowerCase()) {\n      case 'approved':\n        return 'status-approved';\n      case 'rejected':\n        return 'status-rejected';\n      case 'pending':\n        return 'status-pending';\n      default:\n        return '';\n    }\n\n}\n}", "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { DocumentRequestUser } from './document-request-user';\nimport { DocumentRestoreService } from '../services/documentrestore.service';\nimport { UserService } from '../services/user.service';\nimport { Store } from '@ngxs/store';\nimport { of } from 'rxjs';\nimport { UserModel } from '../models/user.model';\nimport { DocumentRestoreRequestModel } from '../models/document.request.model';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { Navbar } from '../navbar/navbar';\nimport { DocumentRequestModal } from '../document-request-modal/document-request-modal';\nimport { ActivatedRoute } from '@angular/router';\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  template: ''\n})\nclass FakeNavbar {}\n\ndescribe('DocumentRequestUser', () => {\n  let component: DocumentRequestUser;\n  let fixture: ComponentFixture<DocumentRequestUser>;\n\n  let mockRestoreService: jasmine.SpyObj<DocumentRestoreService>;\n  let mockUserService: jasmine.SpyObj<UserService>;\n  let mockStore: jasmine.SpyObj<Store>;\n\n  const mockUser = new UserModel('1');\n  const req:DocumentRestoreRequestModel={\n    id: '1',\n    documentId: '',\n    document: null,\n    originalFileName: '',\n    requestedByUserId: '',\n    requestedByUserName: '',\n    requestedByUser: null,\n    requestedAt: new Date,\n    reason: '',\n    status: '',\n    reviewedAt: null,\n    reviewedByUserId: null,\n    reviewedByUserName: null,\n    reviewedByUser: null,\n    isAdminRead: false,\n    IsUserRead: false\n  };\nconst mockActivatedRoute = {\n  snapshot: {\n    paramMap: {\n      get: (key: string) => null \n    }\n  }\n};\n\n  beforeEach(async () => {\n    mockRestoreService = jasmine.createSpyObj('DocumentRestoreService', ['getRequestByUserId']);\n    mockUserService = jasmine.createSpyObj('UserService', ['getCurrentUserDetails']);\n    mockStore = jasmine.createSpyObj('Store', ['select']);\n\n    mockStore.select.and.returnValue(of(mockUser));\n    mockUserService.getCurrentUserDetails.and.returnValue(of(mockUser));\n    mockRestoreService.getRequestByUserId.and.returnValue(of(req));\n\n    await TestBed.configureTestingModule({\n      imports: [DocumentRequestUser, CommonModule, MatCardModule, Navbar],\n      providers: [\n        { provide: DocumentRestoreService, useValue: mockRestoreService },\n        { provide: UserService, useValue: mockUserService },\n        { provide: Store, useValue: mockStore },\n        { provide: ActivatedRoute, useValue: mockActivatedRoute }\n\n      ]\n    }).compileComponents();\n    TestBed.overrideComponent(DocumentRequestUser, {\n            set: {\n            imports: [\n              FakeNavbar,CommonModule,\n    MatCardModule]}})\n\n\n    fixture = TestBed.createComponent(DocumentRequestUser);\n    component = fixture.componentInstance;\n    fixture.detectChanges(); // Triggers ngOnInit\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should load requests on init if current user is available from store', () => {\n    expect(mockStore.select).toHaveBeenCalled();\n    expect(mockRestoreService.getRequestByUserId).toHaveBeenCalledWith(mockUser);\n  });\n\n});\n"],
  "mappings": "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",
  "names": ["document_request_user_default", "init_document_request_user", "DocumentRequestUser", "init_document_request_user"]
}
