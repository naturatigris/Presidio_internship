// <auto-generated />
using System;
using DocumentSharingSystem.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DocumentSharingSystem.Migrations
{
    [DbContext(typeof(DocumentSharingSystemContext))]
    partial class DocumentSharingSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DocumentRestoreRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAdminRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentRestoreRequests");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsAcessRequested")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("Visibility")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.DocumentTableLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ModificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedDocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ModifiedDocumentId");

                    b.ToTable("documents_table_logs");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastUpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastUpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastloginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.UserTableLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ModificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("users_table_logs");
                });

            modelBuilder.Entity("InactivityAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AlertedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DaysInactive")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DismissedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DismissedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("InactivityAlerts");
                });

            modelBuilder.Entity("DocumentRestoreRequest", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentSharingSystem.Models.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocumentSharingSystem.Models.User", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DocumentSharingSystem.Models.User", null)
                        .WithMany("DocumentRestoreRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("Document");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ReviewedByUser");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.Document", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "CreatedByUser")
                        .WithMany("CreatedDocuments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Documents_Users_Creation");

                    b.HasOne("DocumentSharingSystem.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentSharingSystem.Models.Team", "Team")
                        .WithMany("TeamDocuments")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Team_Document");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.DocumentTableLog", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "ModifiedByUser")
                        .WithMany("UpdatedDocumentLogs")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_DocumentTableLog_User");

                    b.HasOne("DocumentSharingSystem.Models.Document", "ModifiedDocument")
                        .WithMany("UpdatedLogs")
                        .HasForeignKey("ModifiedDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentTableLog_Document");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ModifiedDocument");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.Team", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "CreatedByUser")
                        .WithMany("CreatedTeams")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Team_Document");

                    b.HasOne("DocumentSharingSystem.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.User", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "CreatedByUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Users_Users_Creation");

                    b.HasOne("DocumentSharingSystem.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.HasOne("DocumentSharingSystem.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Team_User");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.UserTableLog", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "ModifiedByUser")
                        .WithMany("UpdatedUserLogs")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_UserTableLog_User_ModifiedBy");

                    b.HasOne("DocumentSharingSystem.Models.User", "ModifiedUser")
                        .WithMany("UpdatedByUserLogs")
                        .HasForeignKey("ModifiedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserTableLog_User_Modified");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("InactivityAlert", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "DismissedByUser")
                        .WithMany()
                        .HasForeignKey("DismissedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DocumentSharingSystem.Models.User", "User")
                        .WithMany("InactivityAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DismissedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.Document", b =>
                {
                    b.Navigation("UpdatedLogs");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.Team", b =>
                {
                    b.Navigation("TeamDocuments");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.User", b =>
                {
                    b.Navigation("CreatedDocuments");

                    b.Navigation("CreatedTeams");

                    b.Navigation("CreatedUsers");

                    b.Navigation("DocumentRestoreRequests");

                    b.Navigation("InactivityAlerts");

                    b.Navigation("UpdatedByUserLogs");

                    b.Navigation("UpdatedDocumentLogs");

                    b.Navigation("UpdatedUserLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
