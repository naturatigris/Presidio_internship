// <auto-generated />
using System;
using DocumentSharingSystem.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DocumentSharingSystem.Migrations
{
    [DbContext(typeof(DocumentSharingSystemContext))]
    [Migration("20250607165222_ISDeleted")]
    partial class ISDeleted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DocumentSharingSystem.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.DocumentTableLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ModificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedDocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ModifiedDocumentId");

                    b.ToTable("documents_table_logs");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastUpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.UserTableLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ModificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("users_table_logs");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.Document", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "CreatedByUser")
                        .WithMany("CreatedDocuments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Documents_Users_Creation");

                    b.HasOne("DocumentSharingSystem.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.DocumentTableLog", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "ModifiedByUser")
                        .WithMany("UpdatedDocumentLogs")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_DocumentTableLog_User");

                    b.HasOne("DocumentSharingSystem.Models.Document", "ModifiedDocument")
                        .WithMany("UpdatedLogs")
                        .HasForeignKey("ModifiedDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentTableLog_Document");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ModifiedDocument");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.User", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "CreatedByUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Users_Users_Creation");

                    b.HasOne("DocumentSharingSystem.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.UserTableLog", b =>
                {
                    b.HasOne("DocumentSharingSystem.Models.User", "ModifiedByUser")
                        .WithMany("UpdatedUserLogs")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_UserTableLog_User_ModifiedBy");

                    b.HasOne("DocumentSharingSystem.Models.User", "ModifiedUser")
                        .WithMany("UpdatedByUserLogs")
                        .HasForeignKey("ModifiedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserTableLog_User_Modified");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.Document", b =>
                {
                    b.Navigation("UpdatedLogs");
                });

            modelBuilder.Entity("DocumentSharingSystem.Models.User", b =>
                {
                    b.Navigation("CreatedDocuments");

                    b.Navigation("CreatedUsers");

                    b.Navigation("UpdatedByUserLogs");

                    b.Navigation("UpdatedDocumentLogs");

                    b.Navigation("UpdatedUserLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
